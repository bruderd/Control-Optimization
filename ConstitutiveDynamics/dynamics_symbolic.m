% dynamics_symbolic
%   User defines their system dynamics sybolically here, then matlab
%   creates functions for them to be called by vf.m


function dynamics_symbolic(params)
%% USER SPECIFIED SECTION.

% define symbolic variables
syms p l phi dp dri dro dl dphi ri ro P

[C1, C2] = deal(params.C(1), params.C(2));
[Ri, Ro] = deal(params.R(1), params.R(2));
Gama = params.Gama;
L = params.L;
[Fload, Mload] = deal(params.load(1), params.load(2));

% define state vector (x), its time derivative (xdot), and the input (u)
x = [p, ri, ro, l, phi];
xdot = [dp, dri, dro, dl, dphi];
u = P;

% define (implicit) dynamics of the form f = 0 (f should be nx1)
ri_eq = P + (1/8).*l.^(-5).*L.^(-1).*ri.^(-4).*Ri.^(-2).*((-3).*C2.*l.^4.* ...
  L.^2.*ri.^6+(-2).*C1.*l.^2.*L.^4.*Ri.^6+3.*C2.*l.^4.*ri.^4.* ...
  Ri.^4.*phi.^2+4.*C1.*l.^2.*L.^2.*ri.^4.*Ri.^4.*phi.^2+(-4).*C2.*l.^2.* ...
  L.^2.*ri.^4.*Ri.^4.*phi.^2+3.*C2.*L.^2.*ri.^6.*Ri.^4.*phi.^4+2.*C2.* ...
  l.^6.*ri.^4.*Ri.^2.*log(Ri)+8.*C1.*l.^4.*L.^2.*ri.^4.*Ri.^2.*log( ...
  Ri)+(-8).*C2.*l.^4.*L.^2.*ri.^4.*Ri.^2.*log(Ri)+12.*C2.*l.^2.* ...
  L.^2.*ri.^6.*Ri.^2.*phi.^2.*log(Ri)+4.*C2.*ri.^4.*cos(2.*Gama).*((-1).* ...
  l.^2.*L.^2.*Ri.^4.*phi.^2+L.^2.*ri.^2.*Ri.^4.*phi.^4+l.^4.*(L.^2.* ...
  ri.^2+Ri.^4.*phi.^2)+2.*l.^4.*L.^2.*Ri.^2.*log(Ri))+(-1).*C2.* ...
  ri.^4.*cos(4.*Gama).*((-1).*L.^2.*ri.^2.*Ri.^4.*phi.^4+l.^4.*(L.^2.* ...
  ri.^2+(-1).*Ri.^4.*phi.^2)+2.*l.^2.*Ri.^2.*(l.^4+6.*L.^2.*ri.^2.* ...
  phi.^2).*log(Ri))+(-16).*C2.*l.^3.*L.^2.*ri.^6.*Ri.*phi.*sin(2.*Gama)+8.* ...
  C2.*l.^5.*ri.^4.*Ri.^3.*phi.*sin(2.*Gama)+(-16).*C2.*l.^3.*L.^2.* ...
  ri.^4.*Ri.^3.*phi.*sin(2.*Gama)+16.*C2.*l.*L.^2.*ri.^6.*Ri.^3.*phi.^3.* ...
  sin(2.*Gama)+8.*C2.*l.^3.*L.^2.*ri.^6.*Ri.*phi.*sin(4.*Gama)+4.*C2.*l.^5.* ...
  ri.^4.*Ri.^3.*phi.*sin(4.*Gama)+8.*C2.*l.*L.^2.*ri.^6.*Ri.^3.*phi.^3.* ...
  sin(4.*Gama))+(-1/8).*l.^(-5).*L.^(-1).*ri.^(-4).*Ro.^(-2).*((-3).* ...
  C2.*l.^4.*L.^2.*ri.^6+(-2).*C1.*l.^2.*L.^4.*Ro.^6+3.*C2.*l.^4.* ...
  ri.^4.*Ro.^4.*phi.^2+4.*C1.*l.^2.*L.^2.*ri.^4.*Ro.^4.*phi.^2+(-4).* ...
  C2.*l.^2.*L.^2.*ri.^4.*Ro.^4.*phi.^2+3.*C2.*L.^2.*ri.^6.*Ro.^4.* ...
  phi.^4+2.*C2.*l.^6.*ri.^4.*Ro.^2.*log(Ro)+8.*C1.*l.^4.*L.^2.*ri.^4.* ...
  Ro.^2.*log(Ro)+(-8).*C2.*l.^4.*L.^2.*ri.^4.*Ro.^2.*log(Ro)+12.* ...
  C2.*l.^2.*L.^2.*ri.^6.*Ro.^2.*phi.^2.*log(Ro)+4.*C2.*ri.^4.*cos(2.* ...
  Gama).*((-1).*l.^2.*L.^2.*Ro.^4.*phi.^2+L.^2.*ri.^2.*Ro.^4.*phi.^4+l.^4.* ...
  (L.^2.*ri.^2+Ro.^4.*phi.^2)+2.*l.^4.*L.^2.*Ro.^2.*log(Ro))+(-1).* ...
  C2.*ri.^4.*cos(4.*Gama).*((-1).*L.^2.*ri.^2.*Ro.^4.*phi.^4+l.^4.*( ...
  L.^2.*ri.^2+(-1).*Ro.^4.*phi.^2)+2.*l.^2.*Ro.^2.*(l.^4+6.*L.^2.* ...
  ri.^2.*phi.^2).*log(Ro))+(-16).*C2.*l.^3.*L.^2.*ri.^6.*Ro.*phi.*sin( ...
  2.*Gama)+8.*C2.*l.^5.*ri.^4.*Ro.^3.*phi.*sin(2.*Gama)+(-16).*C2.*l.^3.* ...
  L.^2.*ri.^4.*Ro.^3.*phi.*sin(2.*Gama)+16.*C2.*l.*L.^2.*ri.^6.*Ro.^3.* ...
  phi.^3.*sin(2.*Gama)+8.*C2.*l.^3.*L.^2.*ri.^6.*Ro.*phi.*sin(4.*Gama)+4.*C2.* ...
  l.^5.*ri.^4.*Ro.^3.*phi.*sin(4.*Gama)+8.*C2.*l.*L.^2.*ri.^6.*Ro.^3.* ...
  phi.^3.*sin(4.*Gama));

ro_eq = (ri.^2+l.^(-1).*L.*((-1).*Ri.^2+Ro.^2)).^(1/2);

moment = -Mload + (-1/2).*C2.*l.^2.*L.^(-3).*pi.*ri.^3.*phi+(-2/3).*C1.*L.^(-1).*pi.* ...
  ri.^3.*phi+(2/3).*C2.*L.^(-1).*pi.*ri.^3.*phi+(-3/10).*C2.*L.^(-1).* ...
  pi.*Ri.^(-2).*ri.^5.*phi+(1/2).*C2.*l.^2.*L.^(-3).*pi.*ro.^3.*phi+(2/3) ...
  .*C1.*L.^(-1).*pi.*ro.^3.*phi+(-2/3).*C2.*L.^(-1).*pi.*ro.^3.*phi+( ...
  3/10).*C2.*L.^(-1).*pi.*Ri.^(-2).*ro.^5.*phi+(-3/10).*C2.*l.^(-2).* ...
  L.^(-1).*pi.*ri.^5.*phi.^3+(3/10).*C2.*l.^(-2).*L.^(-1).*pi.*ro.^5.* ...
  phi.^3+(-2/3).*C2.*l.^2.*L.^(-3).*pi.*ri.^3.*phi.*cos(2.*Gama)+(2/3).* ...
  C2.*L.^(-1).*pi.*ri.^3.*phi.*cos(2.*Gama)+(2/3).*C2.*l.^2.*L.^(-3).* ...
  pi.*ro.^3.*phi.*cos(2.*Gama)+(-2/3).*C2.*L.^(-1).*pi.*ro.^3.*phi.*cos(2.* ...
  Gama)+(-2/5).*C2.*l.^(-2).*L.^(-1).*pi.*ri.^5.*phi.^3.*cos(2.*Gama)+(2/5) ...
  .*C2.*l.^(-2).*L.^(-1).*pi.*ro.^5.*phi.^3.*cos(2.*Gama)+(-1/6).*C2.* ...
  l.^2.*L.^(-3).*pi.*ri.^3.*phi.*cos(4.*Gama)+(3/10).*C2.*L.^(-1).*pi.* ...
  Ri.^(-2).*ri.^5.*phi.*cos(4.*Gama)+(1/6).*C2.*l.^2.*L.^(-3).*pi.*ro.^3.* ...
  phi.*cos(4.*Gama)+(-3/10).*C2.*L.^(-1).*pi.*Ri.^(-2).*ro.^5.*phi.*cos(4.* ...
  Gama)+(-1/10).*C2.*l.^(-2).*L.^(-1).*pi.*ri.^5.*phi.^3.*cos(4.*Gama)+( ...
  1/10).*C2.*l.^(-2).*L.^(-1).*pi.*ro.^5.*phi.^3.*cos(4.*Gama)+(-1/3).* ...
  C2.*l.^3.*L.^(-3).*pi.*Ri.^(-1).*ri.^3.*sin(2.*Gama)+(2/3).*C2.*l.* ...
  L.^(-1).*pi.*Ri.^(-1).*ri.^3.*sin(2.*Gama)+(-1/5).*C2.*l.*L.^(-1).* ...
  pi.*Ri.^(-3).*ri.^5.*sin(2.*Gama)+(1/3).*C2.*l.^3.*L.^(-3).*pi.*Ri.^( ...
  -1).*ro.^3.*sin(2.*Gama)+(-2/3).*C2.*l.*L.^(-1).*pi.*Ri.^(-1).*ro.^3.* ...
  sin(2.*Gama)+(1/5).*C2.*l.*L.^(-1).*pi.*Ri.^(-3).*ro.^5.*sin(2.*Gama)+( ...
  -3/5).*C2.*l.^(-1).*L.^(-1).*pi.*Ri.^(-1).*ri.^5.*phi.^2.*sin(2.*Gama)+( ...
  3/5).*C2.*l.^(-1).*L.^(-1).*pi.*Ri.^(-1).*ro.^5.*phi.^2.*sin(2.*Gama)+( ...
  -1/6).*C2.*l.^3.*L.^(-3).*pi.*Ri.^(-1).*ri.^3.*sin(4.*Gama)+(1/10).* ...
  C2.*l.*L.^(-1).*pi.*Ri.^(-3).*ri.^5.*sin(4.*Gama)+(1/6).*C2.*l.^3.* ...
  L.^(-3).*pi.*Ri.^(-1).*ro.^3.*sin(4.*Gama)+(-1/10).*C2.*l.*L.^(-1).* ...
  pi.*Ri.^(-3).*ro.^5.*sin(4.*Gama)+(-3/10).*C2.*l.^(-1).*L.^(-1).*pi.* ...
  Ri.^(-1).*ri.^5.*phi.^2.*sin(4.*Gama)+(3/10).*C2.*l.^(-1).*L.^(-1).*pi.* ...
  Ri.^(-1).*ro.^5.*phi.^2.*sin(4.*Gama);

force = -Fload + (-1).*p+C1.*l.^(-2).*L.^2.*ri.^(-2).*Ri.^2;

pressure = P - p;  % just placeholder, little p will have a different expression when Audrey gives it to me.

f_sym = [ri_eq;...
         ro_eq;...
         moment;...
         force;...
         pressure];


%% DO NOT EDIT BELOW THIS LINE---------------------------------------------
% uses symbolic differentiation to find gradients
dfdx_sym = jacobian(f_sym, x);
dfdu_sym = jacobian(f_sym, u);
dfdxdot_sym = jacobian(f_sym, xdot);

% creates matlab functions for evaluating dynamics
matlabFunction(f_sym, 'File', 'f_eval', 'Vars', {x, u, xdot});
matlabFunction(dfdx_sym, 'File', 'dfdx_eval', 'Vars', {x, u, xdot});
matlabFunction(dfdu_sym, 'File', 'dfdu_eval', 'Vars', {x, u, xdot});
matlabFunction(dfdxdot_sym, 'File', 'dfdxdot_eval', 'Vars', {x, u, xdot});

end