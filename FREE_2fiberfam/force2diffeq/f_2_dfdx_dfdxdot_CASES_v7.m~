%% Calculate dfdx, dfdxdot from f
% v6: Fiber tensions are included as states. There are 4 cases for
% different combinations of signs of gama and betta

clear

syms r0 L0 gama0 betta0 P gama betta r L dP dgama dbetta dr dL c1 c2 c3 c4 c5 c6 x u phi dphi nrat T_gama T_betta dT_gama dT_betta

x = [P, gama, betta, r, L, phi, T_gama, T_betta];
xdot = [dP, dgama, dbetta, dr, dL, dphi, dT_gama, dT_betta];


%% Dynamics

f_case1 = [-dP + 0.5*(u - P);...
2*sin(betta)*T_betta*dbetta - 2*cos(gama)*dT_gama - c1*dL - 2*cos(betta)*dT_betta + 2*sin(gama)*T_gama*dgama + pi*r^2*dP + 2*pi*P*r*dr
2*(sin(betta)*T_betta + sin(gama)*T_gama)*dr + 2*r*(sin(betta)*dT_betta + sin(gama)*dT_gama + cos(betta)*T_betta*dbetta + cos(gama)*T_gama*dgama) - c4*dphi
dL/cos(gama) + ((phi - (L0*tan(gama0))/r0)*dr)/sin(gama) + (r*dphi)/sin(gama) + (sin(gama)*L*dgama)/cos(gama)^2 - (cos(gama)*r*(phi - (L0*tan(gama0))/r0)*dgama)/sin(gama)^2
dL/cos(betta) + ((phi - (L0*tan(betta0))/r0)*dr)/sin(betta) + (r*dphi)/sin(betta) + (sin(betta)*L*dbetta)/cos(betta)^2 - (cos(betta)*r*(phi - (L0*tan(betta0))/r0)*dbetta)/sin(betta)^2
(tan(gama)*L*dr)/r^2 - (tan(gama)*dL)/r - (L*(tan(gama)^2 + 1)*dgama)/r - dphi
(tan(betta)*L*dr)/r^2 - (tan(betta)*dL)/r - (L*(tan(betta)^2 + 1)*dbetta)/r - dphi
2*pi*r^2*dP - sin(betta)*tan(betta)*dT_betta - sin(gama)*tan(gama)*dT_gama + 4*pi*P*r*dr - sin(betta)*T_betta*(tan(betta)^2 + 1)*dbetta - sin(gama)*T_gama*(tan(gama)^2 + 1)*dgama - cos(betta)*tan(betta)*T_betta*dbetta - cos(gama)*tan(gama)*T_gama*dgama];
    
f_case2 = [-dP + 0.5*(u - P);...


f_case3 = [-dP +  0.5*(u - P);...


f_case4 = [-dP + 0.5*(u - P);...


%% Calculate gradients
f1 = [f_case1(1), f_case2(1), f_case3(1), f_case4(1)];
f2 = [f_case1(2), f_case2(2), f_case3(2), f_case4(2)];
f3 = [f_case1(3), f_case2(3), f_case3(3), f_case4(3)];
f4 = [f_case1(4), f_case2(4), f_case3(4), f_case4(4)];
f5 = [f_case1(5), f_case2(5), f_case3(5), f_case4(5)];
f6 = [f_case1(6), f_case2(6), f_case3(6), f_case4(6)];
f7 = [f_case1(7), f_case2(7), f_case3(7), f_case4(7)];
f8 = [f_case1(8), f_case2(8), f_case3(8), f_case4(8)];

for k = 1:4
    
    df1dx = jacobian(f1(k), x);
    df1dxdot = jacobian(f1(k), xdot);
    
    df2dx = jacobian(f2(k), x);
    df2dxdot = jacobian(f2(k), xdot);
    
    df3dx = jacobian(f3(k), x);
    df3dxdot = jacobian(f3(k), xdot);
    
    df4dx = jacobian(f4(k), x);
    df4dxdot = jacobian(f4(k), xdot);
    
    df5dx = jacobian(f5(k), x);
    df5dxdot = jacobian(f5(k), xdot);
    
    df6dx = jacobian(f6(k), x);
    df6dxdot = jacobian(f6(k), xdot);
    
    df7dx = jacobian(f7(k), x);
    df7dxdot = jacobian(f7(k), xdot);
    
    df8dx = jacobian(f8(k), x);
    df8dxdot = jacobian(f8(k), xdot);
    
    % Put these together into dfdx, dfdxdot
    dfdx(:,:,k) = [df1dx; df2dx; df3dx; df4dx; df5dx; df6dx; df7dx; df8dx];
    dfdxdot(:,:,k) = [df1dxdot; df2dxdot; df3dxdot; df4dxdot; df5dxdot; df6dxdot; df7dxdot; df8dxdot];

end