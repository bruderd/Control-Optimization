function out = koopmanSysid( snapshotPairs, params )
%UNTITLED18 Summary of this function goes here
%   Detailed explanation goes here

%% Simulate and find Koopman operator from "measurements" (DNE)
waitbar(.33,progress,'Calculating Koopman Operator...');

[x,y] = deal(snapshotPairs.x, snapshotPairs.y);
U = get_Koopman(x,y, params);

%% Calculate the infiniesimal generator as funtion of coeffients, and from data (DNE)
Ldata = get_Ldata(U, params);   % infinitesimal generator from data
Ldata_hat = Ldata(:, 1:params.N1);  % N x N1 version of Ldata (projection onto the polyBasis)
vecLdata = Ldata_hat(:);    % vectorized version of Ldata matrix

vecstackL = zeros(params.N*params.N1, params.N*params.n);
for k = 1:params.N
    for j = 1:params.n
        Lkj = get_Lkj(k,j,params);
        
        % convert all the Lkj's into vectors and stack them horizontally
        vecLkj = Lkj(:);
        vecstackL(:, (k-1)*params.n + j) = vecLkj;
    end
end

%% solve for the coefficients, i.e. Eq. (18) from Mauroy and Gonclaves (DNE)

W = pinv(vecstackL) * vecLdata;

% matrix of coefficents of monomials
w = reshape(W, [params.n, params.N]);

% dynamics (gives symbolic expression in terms of state and input)
% vf2 = w * params.polyBasis; 
vf2 = w * params.polyBasis; 
matlabFunction(vf2, 'File', 'systemDynamics/vf_sysid', 'Vars', {params.x, params.u});


%% Define outputs
out.U = U;
out.Ldata = Ldata;
out.
out.vf = @

end

