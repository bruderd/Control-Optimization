function [y1,xf1] = snakeNeuralNetworkFunction_wDerivs(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 11-Sep-2018 19:19:06.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   xi1 = 1x2 matrix, initial 2 delay states for input #1.
% and returns:
%   y1 = 6xTS matrix, output #1
%   xf1 = 1x2 matrix, final 2 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0.000308814709826345;
x1_step1.gain = 20.0963882772686;
x1_step1.ymin = -1;

% Layer 1
b1 = [3.8147290123337503;2.6214582578958963;0.43655406132228508;0.44348565436888282;-0.33771690041309155;-2.2336775371044082;0.4199245544427907;0.20674989204044678;-0.32017347194509538;0.22031385027357236];
IW1_1 = [213.25282802137474 -218.50677686494103;-41.614209057339977 36.547169878637803;95.192255507135656 -97.599138086427189;-20.749933668038949 18.686992385835392;-42.922178008438451 47.381112270113476;36.433081737628669 -32.188064326113917;99.382524091588877 -101.88443098494247;-134.28010587417799 138.04154811018262;66.437780767798571 -62.41828518668801;-24.727926484546654 22.370315405555132];

% Layer 2
b2 = [0.18573731654769596;0.47533089620321883;0.038206190948896677;0.24649544534368248;0.3525337416795738;0.014531787275190739];
LW2_1 = [-0.58964404194807341 4.0165267038807864 25.856144095935463 0.70564585591052276 0.81488207830474646 4.6750346291805176 -25.524063088907866 -0.56446794739417083 0.26243802426550317 0.26168156261956582;0.23349545447421302 -3.8851739689479583 1.2509618962895985 -12.836382885454608 -0.38172603454773274 -6.6246690437316031 -2.4287178268997716 -1.2017201248895919 -0.011755158224423357 9.6863061578292111;0.10416214385075385 -1.565245358664584 1.0521140248080483 -2.0827808533980186 0.0090927332975206544 -2.3689426878949718 -0.81593379011912703 -0.07377681542333879 -0.010869731957078571 1.7942535680409781;0.61606349019808571 4.3378290423026797 -33.679793392890957 0.21753374196921624 0.013554549568207641 4.9654384793814508 33.63209499386663 0.69596952198968154 1.4395733916852802 1.7683023738607033;-0.28228926346811384 -4.656764942763945 3.7955263326599047 -15.476129664587315 -0.2114485545491453 -7.8286501525762651 -2.9646364151133517 1.0466516665377408 -0.16126051536042998 11.976116197570512;-0.12027706476048473 -1.8329239627627056 -4.5717101266859759 -2.6955481115539346 -0.025451950885286231 -2.8144833102027138 3.9546115062010863 0.15965885935495319 0.02855461765625112 2.5659720042285858];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [10;16.1592427081696;18.3438430135025;10;10.0771157219469;10];
y1_step1.xoffset = [-0.1;-0.1;-0.1;-0.1;-0.1;-0.1];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Allocate Outputs
y1 = zeros(6,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),2,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
