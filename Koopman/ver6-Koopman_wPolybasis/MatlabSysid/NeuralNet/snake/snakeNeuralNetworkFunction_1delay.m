function [y1,xf1] = snakeNeuralNetworkFunction_1delay(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 11-Sep-2018 18:11:56.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 1xTS matrix, input #1
%   xi1 = 1x1 matrix, initial 1 delay states for input #1.
% and returns:
%   y1 = 3xTS matrix, output #1
%   xf1 = 1x1 matrix, final 1 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = 0.000308814709826345;
x1_step1.gain = 20.0963882772686;
x1_step1.ymin = -1;

% Layer 1
b1 = [-13.912278923162011;2.6722161932123756;9.4338341717565424;3.8156478726576992;-1.3207336400149909;0.1319795811896155;0.98709597199906229;2.7213417654647567;5.7139227107012092;-12.678423354711212];
IW1_1 = [16.08637052738468;-4.3611628895103935;-17.199131657444966;-8.8230513271763087;2.6330144890476941;-3.6371266291751203;5.4915261792321299;7.2104670650804339;8.7027594287890597;-15.153939831454892];

% Layer 2
b2 = [0.32861727836760835;0.41341059774598471;-0.05954055234239479];
LW2_1 = [0.17476786166657027 -0.056014718444077072 0.20872474040207412 0.37880251667975412 0.80699158906385415 -0.65026699171717794 -0.20856344817011319 -0.14572483147040716 -0.078237273518953779 0.02647826231617861;0.10047330745218258 1.8908641722311004 -0.044308021652512367 -0.087086866761774587 2.64387170467496 1.0173346061479929 -0.38773717360559057 0.0089110478881474671 0.035917108619103869 -0.0062755943234501848;-0.028146412560946729 0.19024578118283211 -0.041585647679985904 -0.055951151965554467 -0.5837021249360328 0.15745322929292163 -0.11200843250988023 -0.031029277615705748 0.016416052556346351 -0.01822586851885832];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [10;16.1437051402777;18.3438430135025];
y1_step1.xoffset = [-0.1;-0.1;-0.1];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(1,1)];

% Allocate Outputs
y1 = zeros(3,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-1-1,2)+1),1,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
