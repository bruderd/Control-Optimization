function [y1,xf1] = NLinout_NeuralNetworkFunction(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-Aug-2018 16:58:52.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x2 matrix, initial 2 delay states for input #1.
% and returns:
%   y1 = 6xTS matrix, output #1
%   xf1 = 3x2 matrix, final 2 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0];
x1_step1.gain = [0.20053699350483;0.200544041106296;0.200280392549569];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.1215686862390431;-0.12129378852196826;-0.12520144262002289;-0.17600618467850315;-0.10970533931057266;-0.18452895880183759;-0.10980291934433371;1.5244174616230435;-1.1991637014492456;-0.18755548091640215];
IW1_1 = [-2.4323358645903022 18.722814845077352 -213.41791837646633 2.4663641237859353 -18.790147382209444 214.04492011475051;-2.5536315815671209 18.463008920365077 -213.38271968462124 2.5821428514688685 -18.530572725649826 214.03044232642017;-4876.9742449539563 27.101538356066953 138.36209628476075 4880.0568262048464 -27.418208367317334 -138.34562964808092;132.7462002383551 -3322.9332604433889 14.127127127234333 -132.73907797448609 3324.77517086439 -14.385660033611561;21.977228311340323 -186.89335688130603 -3.7837526007888362 -22.041670889624054 187.5883168426391 3.7262496795450404;8.1531542009699152 125.39883364086236 -2763.8977952890145 -8.3311124668807324 -125.47438616083348 2765.4761673010116;21.433088613926653 -187.39625921547318 -3.7219917741278437 -21.501364110304582 188.11316378554429 3.6636124161726893;-62.582789591385094 105.70308873743163 -34.474073547256694 63.512164343941656 -107.7481278946468 34.870242920238084;42.407403399055283 19.948246001277933 -49.587342630820018 -42.945417372514832 -20.626949720325037 51.29166132904048;-190.79266598889706 3.9100466415594166 8.58453287185473 192.60087898797426 -4.0666837959151865 -8.7508998401819191];

% Layer 2
b2 = [-0.070473210574325831;-0.12233466917698328;-0.19573508223028946;0.046530808364017844;0.015286364183712049;-0.2332699761710052];
LW2_1 = [-1.1081885118880694 1.1125784640826673 -0.10457443713888863 0.16352052350397711 -17.858422167979448 -0.014687643678532441 17.937274876645585 -0.026837702300669428 -0.035738223373817407 -0.23319362734279825;-18.716120133522999 18.802544029340524 -0.054424895306958522 -0.066739158936454226 8.1872774023235291 0.18087606639346299 -8.2477968045179839 0.031178903607974168 0.044378665458714606 -0.099270596369472386;-5.6692082057421009 5.6690080816959574 -0.036160615706490713 -0.046754765262598245 2.1025070012318854 -0.019119230289843279 -2.0663033842793745 0.29900743718565426 -0.33809903008738373 -0.27258111841285509;0.34032743096228851 -0.35430361046566128 0.073129198219095276 -0.1201586382153419 -2.8815180627050765 0.011417575818840738 3.0638391994817415 -0.048803693360243053 -0.0069708390171683912 -0.12703455182933102;-2.7830972268163094 2.9821767521610418 0.041609349515715773 0.051783225218289805 1.2174647952877347 -0.13384716630729243 -1.3030629210251132 0.00013047444386228137 0.065463022758051853 -0.08143386764608404;-4.1571857812135704 4.1519965597126269 0.032722404452693706 0.012870555404631863 0.3552052953687449 0.014409213195396129 -0.34050430817051808 0.15913128230033763 -0.1722030782061737 -0.13141920897540246];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [6.02925470600584;5.80239714539318;19.5174170890666;7.66459323490276;7.02419411493605;19.1826794012276];
y1_step1.xoffset = [-0.156274843142796;-0.148885540376267;-0.106342153265596;-0.133510159664189;-0.139378367975141;-0.0515426322556757];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Allocate Outputs
y1 = zeros(6,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+1,3)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-[1 2]-1,3)+1),6,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 2);
xits = finalxts(finalxts<=2);
xts = finalxts(finalxts>2)-2;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
