function [y1,xf1] = nnet_model_nio(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 29-Apr-2020 19:25:49.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 3xTS matrix, input #1
%   xi1 = 3x1 matrix, initial 1 delay states for input #1.
% and returns:
%   y1 = 2xTS matrix, output #1
%   xf1 = 3x1 matrix, final 1 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0];
x1_step1.gain = [0.285714285714286;0.285714285714286;0.285714285714286];
x1_step1.ymin = -1;

% Layer 1
b1 = [-10.765665978298699201;-0.4346910435062680822;-0.06389657363591669248;1.289914358318209997;1.7964260130326850096;-0.022554550350660056146;0.58814660224207726547;-0.46089194047033049673;-1.7523213246438309465;-32.834687955265493997];
IW1_1 = [-0.19402959086820953383 -0.066473788080851872739 -9.0172871705883483884;0.28397374816996096003 0.48316968827784761986 -0.13286410785433480641;0.049516330489994646313 0.15074824085652252514 0.35719710073505006598;-0.61056728569010032537 0.20071844034425495584 -1.0730460193282456149;0.44116470406469515675 3.6044722944084477412 -0.82270534224011970803;0.9901912142909228276 -0.48292453559700687649 0.776183958205270641;0.99091768972302662899 -1.8661851111090763666 1.2465377019594394703;-0.5630396514958910803 -0.04103465864409362035 -0.74829864224697317798;-0.44680192010580949136 -3.458124360294583699 0.79512401912696595296;-30.871384538085987259 0.00097747583211486074178 -0.01757202426042862517];

% Layer 2
b2 = [0.17867179080571127248;3.0984015961422204377];
LW2_1 = [-0.73386137912471782752 -1.0566627292124521897 1.2138902986097070968 0.10939011067204877647 2.6916438839265119931 -0.061207276238595988149 -0.068492449247325379313 -0.066562769494809520543 2.8245853516172405584 1.1954501648625697197;0.34417346956870148444 0.18973834997445573891 3.0712522771301964397 0.72121726571692801322 0.17426933832934440871 0.29664473719328315893 -0.084996939654593095526 1.411708487376078125 0.2282219951809776326 2.5514180605581775474];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.13382769025303;0.170239396405538];
y1_step1.xoffset = [-7.25060854359134;-4.72939356808897];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(3,1)];

% Allocate Outputs
y1 = zeros(2,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-1-1,2)+1),3,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
