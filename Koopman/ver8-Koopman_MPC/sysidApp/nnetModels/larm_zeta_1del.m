function [y1,xf1] = larm_zeta_1del(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 22-Jan-2019 21:06:14.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 8xTS matrix, input #1
%   xi1 = 8x1 matrix, initial 1 delay states for input #1.
% and returns:
%   y1 = 2xTS matrix, output #1
%   xf1 = 8x1 matrix, final 1 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.897930439478848;-0.9;0;0;0;0;0;0];
x1_step1.gain = [1.11239008811694;1.16699751868495;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222;2.22222222222222];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.034083829200163313;0.50079339225184338;-0.92070438679434452;-0.43490653200774426;-0.3331119622565259;0.013924326702966412;-0.83144030300956984;0.97643540021690367;-1.5047973394286072;-0.93284618256842311];
IW1_1 = [-0.0045024372328394584 -0.19647887879051978 -0.42115426023923608 0.51568255703445498 -0.36205030473592581 0.44187886654166592 -0.46378319554442965 0.28642293762709814;-0.61471445622468901 -0.018132837582082801 0.36262733505233224 -0.68146686245733634 0.73160111984840726 -0.37876405291154641 0.62994890141983317 -0.66070668667667376;0.13283985590668843 -0.86527079724529588 -0.11851929815746674 -0.38729715468145681 -0.96899047226257928 0.52948295770329479 0.54407883638898447 -1.203274728405628;0.80489915737583684 -0.58395062668241793 0.76810374003045401 0.48601384505617962 0.24723869784284608 -0.79133683257053866 0.7415302161180346 0.81889756438880501;0.79426736342709459 0.82944764054972941 0.15757452260827176 0.50439729503342945 0.53387704375537881 0.68082033803244546 0.56137105720803138 0.40416323403174165;-0.024161810902068304 0.21331508840156796 -0.10367065140360575 0.11788013135957628 -0.18204156566022958 0.11190156251101419 -0.097518382866951844 0.15202792839320628;-0.81467765351606181 0.5478939309195795 -0.17762291219685439 -0.12655063247463003 0.72942872329688369 0.086384892524355397 -0.47242906619314651 1.0535374340018413;0.50628685777355942 0.94185091723806347 0.38696929800611568 0.87381907806658177 0.055247560132926317 0.11435703115544592 -0.53025773561264844 -0.21729453173346391;-0.81440385246465219 0.78136397921003331 -0.69430713607105576 -0.57215693291712666 -0.18770109892240069 -0.6539832143652442 -0.92012732046697421 0.82551605400731176;-0.82829166055566295 -0.028018802393999408 0.062185804450692772 -0.53052916386040117 0.099304366798907751 -0.081423944159797812 0.46854590329298917 -0.030387343715669764];

% Layer 2
b2 = [0.12406987692120186;0.0018739090065498609];
LW2_1 = [-1.100951564809594 -1.3722101353429843 0.00819702181306429 -0.0055483534165319415 0.0063832472357687638 -1.2075063301933198 -0.0099549102564645848 0.021231112017591265 0.0012920925073302422 -0.75324364365884844;-1.5008492631272088 -0.097446268272674913 0.00092899163623605624 -0.0049485678682553791 0.0042354865857129722 3.3370232698865383 -0.0028521984465741841 0.0013384556147364257 -0.0038597880938937741 -0.059983151534733208];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1.11239008811694;1.16699751868495];
y1_step1.xoffset = [-0.897930439478848;-0.9];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(8,1)];

% Allocate Outputs
y1 = zeros(2,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-1-1,2)+1),8,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
