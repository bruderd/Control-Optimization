function [y1,xf1] = larm_nnet_inout_1del(x1,xi1)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 23-Jan-2019 18:56:16.
%
% [y1,xf1] = myNeuralNetworkFunction(x1,xi1) takes these arguments:
%   x1 = 5xTS matrix, input #1
%   xi1 = 5x1 matrix, initial 1 delay states for input #1.
% and returns:
%   y1 = 2xTS matrix, output #1
%   xf1 = 5x1 matrix, final 1 delay states for input #1.
% where TS is the number of timesteps.

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.897930439478848;-0.9;0;0;0];
x1_step1.gain = [1.11239008811694;1.16699751868495;2.22222222222222;2.22222222222222;2.22222222222222];
x1_step1.ymin = -1;

% Layer 1
b1 = [-0.68198023589423729;-0.51556808092459672;0.1915113213653708;-0.0062813897234763596;-0.51128743176855551;1.1757847778055066;0.86578637900177124;2.1561228909211878;0.11227254139165933;-1.3974087951959511];
IW1_1 = [0.11978604719620085 -0.03795032064490228 -0.19779337233576649 -0.10963800477227058 0.3583960700286592;-0.11128626038865892 0.67662234342332883 0.27699760455494887 0.048254177548921119 0.15084617918569557;-0.31129628281761085 0.017877474097995824 0.054825752897887804 -0.028868601849197331 0.29873362352146066;-0.037615327358327365 0.09778547431277923 -0.00024062345163201095 1.545033999546444e-05 0.0001332897297004442;0.60763185123380947 0.043949742783362319 -0.16817988173927384 0.039157302978711589 -0.68588688624765959;-0.33044974191183513 1.2844296764929333 0.60729762894389638 0.14285785104012028 0.14671740789494797;0.11217532859549051 0.11182074087911063 -0.15668337049242423 -0.11094483487587266 0.45627495876913576;-2.5872273943563773 0.83505298547789719 -0.15427644687738534 2.260667111322161 3.4424509428932408;3.8342179087248041 -0.065562019504408625 -2.4680081984795947 -0.69530427116883675 -4.6995035932827145;0.52034945738817451 -1.7094563400242704 -0.79946196085467036 -0.18096349481324847 -0.22416825552306971];

% Layer 2
b2 = [0.48117021897979922;0.2627252585212892];
LW2_1 = [1.1891451132738249 1.0272424247955643 -3.0340530782883857 -7.4812247270883141 -0.38142760397725101 0.88659974899413818 0.92949438322662592 0.0034353014909680769 -0.01047518487124988 0.36064940738551388;0.45377710301927632 0.41015527735320817 -1.1917495970989709 7.3268509063487297 -0.15978930885858106 0.29682163332153533 0.35520737966739457 -0.00069242803709773789 -0.0066730085414547476 0.10186601928513384];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1.11239008811694;1.16699751868495];
y1_step1.xoffset = [-0.897930439478848;-0.9];

% ===== SIMULATION ========

% Dimensions
TS = size(x1,2); % timesteps

% Input 1 Delay States
xd1 = mapminmax_apply(xi1,x1_step1);
xd1 = [xd1 zeros(5,1)];

% Allocate Outputs
y1 = zeros(2,TS);

% Time loop
for ts=1:TS
    
    % Rotating delay state position
    xdts = mod(ts+0,2)+1;
    
    % Input 1
    xd1(:,xdts) = mapminmax_apply(x1(:,ts),x1_step1);
    
    % Layer 1
    tapdelay1 = reshape(xd1(:,mod(xdts-1-1,2)+1),5,1);
    a1 = tansig_apply(b1 + IW1_1*tapdelay1);
    
    % Layer 2
    a2 = b2 + LW2_1*a1;
    
    % Output 1
    y1(:,ts) = mapminmax_reverse(a2,y1_step1);
end

% Final delay states
finalxts = TS+(1: 1);
xits = finalxts(finalxts<=1);
xts = finalxts(finalxts>1)-1;
xf1 = [xi1(:,xits) x1(:,xts)];
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
