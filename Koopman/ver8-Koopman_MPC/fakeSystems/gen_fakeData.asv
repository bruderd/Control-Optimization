function fakeData = gen_fakeData( sysName, sysvf, sysinput, params )
%gen_fakeData: generates a csv with fake test data from a nonlinear system
% with input
%   Can use the mat file generated by this function to test the rest of the code
%   sysName:    string that describes name of system, i.e. 'doublePendulum'
%   sysvf:      function handle for system dynamics, i.e. @vf_dp
%   sysinput:   function handle for system input function, i.e. @idp


Ts = 0.02;  % sampling period
x0ub = [1, 1];  % upper bound of initial state
x0lb = [-1, -1];    % lower bound of initial state

tspan = [0, tf];

x0 = (x0ub - x0lb)*rand + x0lb; % random initial state

[t, v] = ode45(@(t,x) sysvf(x, sysinput(t)), tspan, x0);   % simulate plant response input (defined below)
u = sysinput(t);

tq = (0:Ts:tf)';
vq = interp1(t,v,tq);   % interpolate results to get samples at sampling interval Ts
uq = interp1(t,u,tq);

% inject noise with standard deviation 0.01
mean = 0;   % mean offset
sigma = 0.01;   % standard deviation
noise = sigma .* randn(size(vq)) + mean;
vq = vq + noise;

% store data as a .mat file and a csv (make proper variable names for .mat)
t = tq;
x = vq;
u = uq;

save( [sysName , '.mat'] , 't', 'x', 'u' );

% define output
fakeData = struct;
fakeData.t = tq;
fakeData.x = vq;
fakeData.u = uq;
    
end