function [Y,Xf,Af] = nnet_2019_10_10_14_43(X,~,~)
%NNET_2019_10_10_14_43 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 14:43:29.
% 
% [Y] = nnet_2019_10_10_14_43(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.67910110601272;-0.818672957097964;-1.34915139956283;-0.810759569284124;-0.451065121033642;-0.522762459044255];
x1_step1.gain = [0.666443798096683;1.14606263007027;1.00617600312944;1.28351228010205;2.05064836574591;2.05643700520543];
x1_step1.ymin = -1;

% Layer 1
b1 = [-6.3989163873459737886;-2.2919580637951439961;8.2060445226305667177;1.7022087494481175085;-1.4041435954009864329;1.3653731394918340314;-0.31672020740388578952;-1.1065052770676635507;0.12658128684152719634;-2.154961182375566775];
IW1_1 = [11.100004754953271657 -7.0801960642579375715 5.125425365415447132 3.8612820284043158914 -8.4674594881129845447 -2.590782932794245319;2.5137283758383586196 0.45425011984253449437 1.4115724842622761059 -0.38757934664882520703 -0.35714356350014259123 1.2548644211844837137;-14.887495676453493587 2.1038179048443477193 -10.668099359518796732 3.4137248695738060533 8.452302814066461778 5.0726566880014809513;-1.329246055690320949 -0.86805140362074817428 -1.549818151647347042 1.5558292527215844547 -0.17715709267865992205 0.016249543169720076508;-2.0305579881167403755 5.4180411203756717597 5.674853681077054901 -5.1898794576108695509 1.313171829846497829 -0.5229205832062189252;1.45940429380118597 -1.2760877055648109923 -1.4472676935518737906 -0.82023508813994883138 2.0396054217577095358 -0.18364185535863075671;-2.6737664755717291953 -1.9340705241372877499 2.2719001970424250736 0.13067984431957246905 1.249973517145672508 -1.7277304945751954524;-1.4433434277123955436 1.9215171437817839539 0.98281389676292740809 -0.69855976181805445879 0.89469262442026542548 0.4733346359709512674;1.3033464398619265534 2.2688152697456867024 -1.5556504275674414295 -0.15907510302098146204 -0.39824004331636192466 2.3061734308482630951;-0.41053031058962230482 2.2700757137860092527 3.6650318203789824523 -2.2331087471542927503 -1.7135301375484479625 -1.6303089097841845234];

% Layer 2
b2 = [0.48185780622058954625;0.49137969367527539744;0.13324864353947679652];
LW2_1 = [0.601968776218698709 -0.11518947724845271519 0.64338267276254268445 -0.54065451248239826398 0.62123930854159459258 -0.23515022414414554763 -1.3050832312074214236 0.77271809129846447117 -1.4616023632290284784 -0.70555302929935548306;0.38304635501705797118 1.1369892576086475522 0.51106768003359759334 0.93694411200456784172 0.14653744623018571946 0.34600004930704764128 -0.53950790590369956945 0.47221544480813137934 -0.71646905951238715193 0.40687888068761063343;0.15244281362761039067 0.71203079516337219879 0.17750068989521800011 0.81455636165735290088 -0.02459515435756054122 0.48568373637196576853 -0.14424178334172352289 0.17523097762626702045 -0.16969243582746854071 0.52474949325313791082];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
