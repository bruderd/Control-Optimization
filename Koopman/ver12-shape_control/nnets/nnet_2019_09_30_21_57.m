function [Y,Xf,Af] = nnet_2019_09_30_21_57(X,~,~)
%NNET_2019_09_30_21_57 neural network simulation function.
%
% Auto-generated by MATLAB, 30-Sep-2019 21:57:54.
% 
% [Y] = nnet_2019_09_30_21_57(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.61801073792437;-1.39324170158587;-1.38506603682853];
x1_step1.gain = [0.62315006704972;0.699300701266655;0.658357661876592];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.1935935344828929594;2.6486956799750118741;1.4796914158685188223;-0.31455772679715676698;0.00090507922735523385453;0.2402205664962015208;0.36762960245117914937;1.2474986549492919075;1.2050771803249327174;4.1381363519194218625];
IW1_1 = [-1.3835258664242400251 0.60239667870264268501 2.2738598738646986774;-1.3447984686144907052 1.8257539529595432359 -0.92485472539013069415;-1.3211573331848660562 -1.0253759116565193121 1.1860818862261530704;0.63419531574835019683 -0.72458537751864948717 0.57368488368890946383;-0.064291357476807586835 0.25272266904438445145 0.17134451057658536821;0.41864445504761260697 0.30756402250032405243 -0.37465965965039393915;0.41733105205119802594 -0.093912665068347583874 0.5622627049659688625;-0.96243798266616975567 0.16319123721235026525 -1.2707456125288372206;0.75871285355768181002 -0.91455192742830715424 0.69462372795657734148;1.8704921810420123141 0.17640701922244808597 -0.86268352201882958497];

% Layer 2
b2 = [0.007908246710569746124;-1.0875298197890814755;-0.11860724994430303647];
LW2_1 = [0.010639298021671078284 0.26181875189958336847 0.03600573460572249751 -0.92898264362523308435 2.1997705308483044284 -0.44556325396956930618 1.5370157085384492657 -0.32501839408102134454 -0.69052088909456688093 -0.078090121373654577952;-0.043772072138898172888 -0.041838680673975364721 -0.24140564378301762605 0.13537123184306149026 0.82348479129260288012 2.1887514284752009885 -0.31693794643336936634 0.05789717019819800442 0.12518748107984689621 0.81780188210116333547;0.0015941110079055052957 -0.073777304764326145925 -0.058181993585066822672 0.22945225896314133673 -0.21929301677202714393 0.61867312712351618664 1.6832267734489232414 -0.38690397345400973084 0.15463955937462239842 -0.16658332993407809486];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
