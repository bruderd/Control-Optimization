function [Y,Xf,Af] = nnet_2019_11_05_19_21(X,~,~)
%NNET_2019_11_05_19_21 neural network simulation function.
%
% Auto-generated by MATLAB, 05-Nov-2019 19:21:08.
% 
% [Y] = nnet_2019_11_05_19_21(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.204449731482841;-0.0754503470065995;-1];
x1_step1.gain = [3.85124091905506;6.376853088905;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [5.0121680498613843113;-4.1291528612668670917;-3.1914547023317529906;-2.1880084057692230637;1.89107873196209475;-3.706667911007534677;-4.338510412636462199;-2.3519936421571334684;-1.7656347562594176814;1.0737351012586513477;-1.9360256368834753982;0.53051278083422348519;-0.81652277547287555048;0.95560358055012561973;0.51941340826336745984;-0.33727248860176417544;0.11214041318629044963;0.96370649339313985138;0.40194333939183007898;-1.7304422176873399675;0.18809465504693803628;-1.129881993891022951;2.7428541607039464978;3.5328943407347481731;-3.4511772733624450638;2.3809225749717564113;3.853166574218498841;2.84779772718274371;-3.1720107452380776891;-4.9334454909501630482];
IW1_1 = [-3.2145644125370949062 0.74983282728661582173 -2.4858718914912873998;2.0643583288052536062 -3.5665692266355133455 -2.2100781456779441392;1.8664737815634813156 4.3605168016193021074 -1.8453044368784261575;0.56852638916848419193 -2.3676593656144673261 -3.9476379855931722496;-1.4772438619118446468 -1.4374788786185299649 3.755166684677151423;3.0182992234445893409 2.9110038565025559976 2.8103767067556484349;2.2583299374254548475 -0.17677748832756939867 3.0259167966992799315;0.51919001046093549157 3.9419593681646598604 0.95316459486630733533;5.4242179401427295105 1.1151824380217270072 -0.76014781434212908007;-1.1377546209936013621 2.2946117626801383338 -1.6875433716528582817;3.0148433722282050873 4.1830376177148824723 -3.5198374862173356092;-0.30085279819844490401 1.2952788361019853536 8.1329473109052301538;-4.2767688346792223086 -1.9080239612456315612 -4.2444833040986180706;-2.9300208462170185264 6.6213894923991780672 2.4379528503428327113;-3.4070456557073982573 -0.25255369406297906165 1.7169642796119330974;-5.152422113008058524 -0.83214334594638406095 1.8417941986856087855;-0.19035948888802159407 3.5169884377836857503 0.9374250112804869417;4.9540951665163257545 -0.3203260040206661885 2.0830581566481480849;0.8656695951523101229 -2.1718303153765528002 -2.8054783575079991209;-1.8299889410082861296 3.4601679358395664998 1.9938998280161401855;-0.14691443829116973552 1.3321375229013294739 9.2465944146395102621;-3.1416819771253439164 -3.4801705824942179568 -2.1532866989488259613;0.99902418623125144315 -0.078571344676781063043 4.1642473682732639162;3.2212186550106660654 2.376949343287283245 1.3974255896141525302;-4.0270821996198282733 -0.42995779171967757337 4.873506860238596694;2.9194904901842457789 -4.0719904384887311011 0.80720574611818185495;4.6457034950390747596 0.47206463450482838429 -5.2841512237909968874;3.3542591808392150377 2.5009625827276562582 2.9013516534882475284;-3.1055803714268059856 -0.38398748286057143853 -2.7772964089807383736;-5.7306548814740718711 0.54207493114406823942 0.146605226191477922];

% Layer 2
b2 = 0.74633936667660527586;
LW2_1 = [1.5626529325308309293 -0.092149743207286055613 -0.70903830057725381053 0.17324153774602790712 0.31270853505494933255 -0.66185270448401156695 2.1596327923430860274 1.7159549326809631076 -0.51561738751396835045 -0.30318917903921377421 -0.24442939296639126789 -0.58068288419300029268 -0.5295641701723641237 -0.17921148146633131271 -0.88024335096064243444 0.33134065448590271918 0.68573370575044134689 -0.46374189252678621465 0.1696339427083676521 -0.89104222775685526514 0.60106102033198127721 -0.1618393956697300462 0.13342372428419690955 0.24937544783438492235 -1.6446599999610007625 -0.28877731575582943346 -1.4117717060052750178 0.25669089713707166078 0.45089956288564453368 0.58046258535553774127];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1;
y1_step1.xoffset = -1;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
