function [Y,Xf,Af] = nnet_2020_04_05_14_25(X,~,~)
%NNET_2020_04_05_14_25 neural network simulation function.
%
% Auto-generated by MATLAB, 05-Apr-2020 14:25:53.
% 
% [Y] = nnet_2020_04_05_14_25(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 2xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.452232665221464;-1];
x1_step1.gain = [2.02649702355491;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-6.5922846228614799813;-6.2013181906466705584;-6.7188484057076092171;-5.5193182864567669199;5.3493417134011203018;4.6668725409999476383;-4.5880789682750906522;4.578986550384434473;1.5340863713417782765;2.0593476367710348285;0.30143085218436221906;-1.0790152469162979099;1.6574370854197324476;2.3067497106407124363;-0.37386465405674501605;0.62630869297227997894;0.24895193330962012146;1.2508755992646938271;-0.80713584218227263367;0.99372142909690164281;3.1294015872655962518;-4.2538279372546892176;2.8707060499882035565;-2.2760639133277273949;-4.8480852028100329676;-5.3703991444698742086;5.9488006499136867333;6.7506219080132687793;2.8140052716677557143;-7.9591427755418715506];
IW1_1 = [7.5959841040431408388 -1.0568103369110632972;4.7005696682341246984 4.272352556375941468;5.8085450818935333572 3.9684359276803977679;8.0285126097120187438 -3.7237163328666182949;-7.8304934242446950776 -3.6938518498638068799;-7.1168494968779105747 -2.9457797278569772814;7.0500715625504479789 -4.7520866557374574768;-5.422950978831082125 5.1559828075494298361;-2.8640299900179231329 3.4860104356589691754;-6.4302358337684095702 -2.3376810807578425333;-4.1858043537338085471 2.0077238779243233857;5.7179095172424485582 4.6694205543082505372;-3.459615555850797719 -6.7042991809032042028;0.50205255760701794632 -6.9756605295247302578;-2.491532292205123067 -7.7759522367206210802;4.0919797189102666835 7.3379206722608403268;0.78667869962551151275 7.9267736999637357087;5.5090759566689522231 -3.8915712874725949533;-6.1452634134024117785 -5.0338613487450905026;2.3235618138071880701 7.215113112567262732;3.9280335770795846706 7.8228027704978000401;-2.5436581650417173783 -8.0685313396625133464;-0.27043769973711345722 5.2244789120583599029;-10.806174262444324441 8.8759053841313058086;-5.655039976537735491 5.2635703301136320675;-2.7155039118175561264 7.2468378757363902665;3.705028988878920515 -7.3516116499228330028;5.9532424498685676539 -2.2060503602142875756;-2.4920546798856992865 5.0384631876773600112;-7.3086861847080459853 0.72075220735241607439];

% Layer 2
b2 = 0.16700721934185505657;
LW2_1 = [0.93205988074970613777 -0.41710097142727226016 0.46466902183602182275 -0.44044380435867314105 0.61755056715090783648 -0.88497782756630405387 -1.477300436592484667 -0.27273225645481313784 -1.8293338734049409133 -0.19661629609164388288 0.30419634497619685298 0.15207080663055708158 0.020756331048275691864 0.01335317514775460207 -1.0368698903472131079 -0.76382647469777398275 -0.52180118537438180404 -0.29346749483390022206 -0.22803728805266937352 0.23467265593998953843 0.099766363271506897092 -0.086361249946861950999 0.23444265851498527486 -0.20716869576601007474 -0.010229144620605128829 0.33441005155562469886 1.1554899903774513703 -0.3555507328188232119 0.8987719638544370282 0.55800215729917468366];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 1;
y1_step1.xoffset = -1;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
