function [Y,Xf,Af] = nnet_2019_10_10_14_56(X,~,~)
%NNET_2019_10_10_14_56 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 14:56:44.
% 
% [Y] = nnet_2019_10_10_14_56(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.604938252517313;-0.553550430111632;-0.496540544299756];
x1_step1.gain = [1.69608747312056;1.86472651654302;1.99124055742832];
x1_step1.ymin = -1;

% Layer 1
b1 = [4.8886300244494025335;-4.8112190471258156066;0.026808305604944245026;0.0047649127361439084713;-0.0018909171064689902966;0.0068718529367644285225;-0.017754350938297636109;-4.9592447447199567989;-3.3058383182599966332;4.6163607564314146359];
IW1_1 = [-0.34295944798528837927 -2.3310757387523612927 2.9363905076720149268;3.6276222912730418102 4.7434626870059455328 2.8396763372903053302;-1.6741604606643678554 -2.4954584859979771494 -3.765340938002363913;-0.24040422828954019496 0.21595194007108378664 0.13503116779096055455;0.15772110443614040243 -0.33202799474010519232 -2.5283183403551814372;0.18610402528382205545 0.21153523059431572628 -0.0095383902527818621719;-0.59868098693029192514 0.45292539182705260359 -1.128864869886917921;-0.34628272538170873363 1.6529068655348804207 6.5198743953154147945;-0.58058340930180540873 -1.2708713011238463864 -3.902926822517962524;2.0320639209708541983 -2.1574514272340277188 4.3390824359036725966];

% Layer 2
b2 = [-0.52424744746073281831;-0.40074808403179157379;-0.10358435117261170777];
LW2_1 = [0.75671547462905441872 0.019992720343268384486 -0.041611452151923009057 -1.4794627507296902458 -0.30094145425978580111 -0.30244988146888673874 -0.89562117258232032402 0.081280045750760143708 -0.14214585988356329138 -0.25892169624775984715;0.53822330490408620829 0.016392658238975166968 -0.043620235244617069914 3.2499463653449538469 -0.33655801002990592963 -0.55655415826933474222 0.068645390396997796323 0.075107866723113952956 -0.12599778108879916561 -0.1663536399758432649;0.034233781555398377916 0.018075331310249263816 -0.04544392823163094508 -0.24094614168644468144 -0.017638079563880901257 4.9690368281289964969 -0.011188955599236393573 0.02300203437682619978 -0.034230746495869095181 -0.014970819610129202162];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
