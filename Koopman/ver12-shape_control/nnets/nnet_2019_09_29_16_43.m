function [Y,Xf,Af] = nnet_2019_09_29_16_43(X,~,~)
%NNET_2019_09_29_16_43 neural network simulation function.
%
% Auto-generated by MATLAB, 29-Sep-2019 16:43:18.
% 
% [Y] = nnet_2019_09_29_16_43(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-5.23871129821204;-4.87582037725387;-3.60100470738632];
x1_step1.gain = [0.190775711683155;0.210027165432303;0.282318511233761];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.0901247937580147429;-1.1217931393765128156;0.08141697439259601432;0.73372446214256636932;-0.2453895970848933572;-0.22043525264240756978;0.28910105347345443905;0.663816141534198767;-2.1636384013139093874;3.0262355449323239398];
IW1_1 = [-0.27474714179365966604 0.80632138493350968833 -1.8867065192921170791;1.2805822464959031315 -0.073399923526880905822 -0.33236835166476746961;-0.16845383318777867876 -0.59378442225970839985 0.031105981380422906279;-0.62320690570299153155 0.096274194570404023064 -0.85551205246548911454;-0.29539606949034524774 -0.7354902965248686364 2.2222808265455817889;-2.1694227584176886126 0.22156314420272907317 0.48976516359455479765;-0.033171460644385926397 0.34586216124075852552 -0.067237393215796595336;0.41881289404863286663 -0.15190563889369984585 0.69865482193604577787;-2.3504187016996969106 0.070040524832428369129 0.43713852565802674421;2.1158456819353266276 -1.5973777723043565135 0.23289671730891220447];

% Layer 2
b2 = [0.012707410286235960861;0.3045564887538215193;-0.48942149643614352161];
LW2_1 = [-0.01047427514450625409 0.41737213259154448686 -1.3458909623854076187 -0.044060128615500210314 0.0041098126811051861537 -0.19694389871623663169 1.2655027564385594729 0.12464663973380167572 -0.28130741147186100193 -0.29727593056652112935;0.057880805600744857087 0.81335773700033908717 0.98015862529827291194 -0.22861285647349177674 -0.022760719822599719681 -0.3666342300291104972 -0.75675004281111857285 0.18502217557168251783 -0.48731873997528579734 -0.072426006744116047664;-0.18956285014634310926 -0.37186573537198180928 0.046389561197308304408 -0.70660762797492082665 0.054127809478920700659 0.11519001371089232499 1.3467150512310661625 1.4801954633066651823 0.17264765082305297272 -0.23900649796237258271];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [0.364537561276956;0.364158084928424;0.365371428633345];
y1_step1.xoffset = [-2.7425653048049;-2.74602166336943;-2.74230504115073];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
