function [Y,Xf,Af] = nnet_2019_09_26_20_24(X,~,~)
%NNET_2019_09_26_20_24 neural network simulation function.
%
% Auto-generated by MATLAB, 26-Sep-2019 20:24:46.
% 
% [Y] = nnet_2019_09_26_20_24(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.57327791626395;-1.43268029664809;-1.38738523619758];
x1_step1.gain = [0.622332510827639;0.690342620443814;0.743413104360809];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.9466256914659330057;-2.867453147608155728;1.0791155413189184031;0.18178931352389890441;-0.081504371607885206519;0.0040328290196248936517;0.48165654963993215221;-1.5269634694439098155;-1.3019629371331755685;-2.8738758389663634496];
IW1_1 = [-1.0096007347356741324 0.26988836907400309828 -2.0496369849298736732;-0.085461506667324327324 -3.2954284406117886341 -2.3550096362081034407;-0.31285175368459811063 0.14005939931781336005 -0.76278461576754019724;-0.37828802172338299448 0.36550748178360498164 0.09468252638600219151;0.57131258103419924055 0.73679072450241922532 -0.069809420812464606509;-0.098265910467915384974 -0.21314906253958851301 0.10578968905443134063;0.25531595177067067937 -0.13608736969229431879 0.70836366938248374048;-0.97335512798083612118 -1.8899865679017724407 -0.74081367218100879768;-1.0324609920719314271 1.0312125142783257203 0.41168900985260586944;-0.83721195901540756967 1.7390544821717646151 1.6633256574242047954];

% Layer 2
b2 = [-0.41195362047638145464;0.37919231037658440719;-0.27909818583577666873];
LW2_1 = [0.74357609936224300373 0.020076105161153143253 0.038850280984438115284 -2.3765016145227497724 0.39536752893253840346 -0.1779069232252583066 -0.10516789494830768026 -0.043032408195792869188 -0.23617871616954516645 0.04960640519569343293;-0.25316989848993110002 0.010058657382382986747 -0.42133292916359560421 0.28550064738723240909 0.052136591649646971125 -5.2345874822456082143 0.46588436774712138622 -0.0057795226992253603826 0.0068344781921504020941 -0.013539604893065548818;0.68538853135251465165 0.011862717836790635101 -1.3450442995840110605 0.18210935523189247798 0.27583106451286837357 0.47634002253262919258 1.3813517243764472653 -0.041562530995081670149 -0.0044249790638070853749 0.025487563522127176102];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
