function [Y,Xf,Af] = nnet_2019_10_10_16_05(X,~,~)
%NNET_2019_10_10_16_05 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 16:05:49.
% 
% [Y] = nnet_2019_10_10_16_05(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.12520182470669;-0.919903580947738;-0.964677203024396;-0.629975818805019;-1;-1];
x1_step1.gain = [1.02168829524382;1.07363252809921;1.1531025043986;1.59009301111279;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.8143199465120631864;-1.6774959005109191246;1.0572356630319277304;-0.55884806512787443822;-0.35426029074336906621;2.2245335047792100802;-1.2740677373600468592;2.0060059804686987128;1.030249069798882644;2.0633773151202690066];
IW1_1 = [-3.8522195960108036594 3.7280857617002780557 -5.2123008466922335913 -0.34304900846454045027 1.9784560806392383903 3.7742008674645668442;1.5430197555900122541 -1.905438445352194643 1.6350728357964654514 -0.58244931740591532332 2.5396759860401023623 0.2494177490218161819;-3.717557731798473597 3.3998917246707072159 -1.1546259649384189583 -1.1040264375957433707 3.8526765930280437722 0.94725486615631016019;0.77612724827367629565 -1.8666126810814012149 2.0496671360021814223 -0.72792070164313871228 -4.3917345447395188529 -0.80270462904250050595;-0.022866375544915502893 -1.3366398907911880567 1.4459978586261954536 -1.1186910917857495473 -4.3315434064743696396 -0.76951924756132394911;-0.59561300890879287362 3.7690757785227479992 4.2889614818293662069 1.3871222679336385752 -4.3940957116330112697 4.2057738883874140612;0.83674850144133616769 -1.9589692647993068864 0.87852709019644537047 -0.18523100277179885276 2.3056090472188821572 -0.095148002476016554918;-2.0064605327165803139 -2.8960153329746507467 -0.50675507633886296421 0.13073896200663490119 1.021715642107816624 2.6438331911695529541;-0.73631054985219179798 -1.1235649364292059627 -1.3764871186230647204 1.0633345144610255595 -0.67019503195481000546 -0.81343272421862633514;3.2159162522415303265 2.0639474352958750991 -1.0207590267718462673 -1.9541092769604520019 3.9081680256704003362 -3.4145623646207905466];

% Layer 2
b2 = [-0.12553075853213130353;0.080883070764359007998;0.16302560820334222047];
LW2_1 = [-0.25906321011639837915 -1.9064717647531073119 -0.075483564974473824072 -1.434232952359859592 1.7431257006417386624 -0.15589302276614352971 2.0173086137436828658 0.55293547593770020487 -1.1805752056269649408 0.24978224029398599093;0.0092827462163358690633 -1.6399178147111423964 -0.57550557786651512782 -2.2629308151320191023 1.735740426835796546 0.20212951837914916453 1.7406739609930668156 -0.056591470970435750476 -0.36081904142058290885 -0.047326032319342750676;0.080508923675159674294 -0.32821943517983748206 -0.28730188857453320406 -0.42543078131139383524 0.065632353624235584277 -0.0052231032554461414436 0.23682682703462515361 -0.16525325700393722617 0.036452592268056173419 -0.040715569098984362439];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
