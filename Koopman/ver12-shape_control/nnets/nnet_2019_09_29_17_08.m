function [Y,Xf,Af] = nnet_2019_09_29_17_08(X,~,~)
%NNET_2019_09_29_17_08 neural network simulation function.
%
% Auto-generated by MATLAB, 29-Sep-2019 17:08:56.
% 
% [Y] = nnet_2019_09_29_17_08(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.61801073815412;-1.39324170180602;-1.38506603689882];
x1_step1.gain = [0.623150066969358;0.699300701065485;0.65835766179616];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.3814387696102556902;-0.88220311706096210536;-1.0040034422695152116;0.27298782161306311966;-0.064099015616944671203;-0.67480651424462323451;-0.61868476360561941441;-0.79729159563410656464;-1.5113149647422963184;-2.4715278715652639896];
IW1_1 = [-2.8208600319087446806 -0.95682789290401637494 2.9027425975306759831;1.0579476845593949186 0.53140366041147168996 -0.086970259414373599083;0.49477769395553794496 -1.0543844977958689579 0.23603513006812068542;-2.0095868272153891709 -0.71737255060814342222 -1.9290944008826294009;-0.75179823550033741952 1.6334969529024718771 -0.30149711538617296469;0.3610538994497397014 -0.77600471249564950682 -0.31827901234500471928;-0.79647405082742295246 -0.39613279467333001316 0.10007028241882097441;-0.35904540990936428813 0.84819587485323499898 0.28908849093950295117;-0.66671234040870486215 1.5253722105988440916 -0.30745459321243323592;-1.1562007751872189765 2.5876740743752351115 -0.78649156978541823193];

% Layer 2
b2 = [0.13054587322665550664;-0.29704697091919834984;0.10829014831305761035];
LW2_1 = [-0.01815808230981207777 0.031836720496724112139 0.54152551896590916947 0.006929201722512560481 -0.22332906669423258084 -1.8103642094007521557 -0.12412188517334853122 1.776675701405910246 -0.5554815717423301491 0.050938003349395882813;-0.011052814203236147744 0.67825239310651641578 -1.0680178678530296565 -0.00082864001227831178466 0.39591275520679519717 1.0456520307183794216 -1.1392824373514334191 -1.04581501093691287 0.86991422616141234059 -0.028055503267234733339;-0.0072454040146808802031 0.60434668345275832646 1.7260031572482374962 0.017063446450590796788 -0.55272371355160443418 -1.4095827262039632988 -0.97704377756195859295 1.5597946552121815245 -1.7798659653368782418 0.28677932272107165002];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
