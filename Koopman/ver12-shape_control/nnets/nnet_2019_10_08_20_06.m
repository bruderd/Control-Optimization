function [Y,Xf,Af] = nnet_2019_10_08_20_06(X,~,~)
%NNET_2019_10_08_20_06 neural network simulation function.
%
% Auto-generated by MATLAB, 08-Oct-2019 20:06:33.
% 
% [Y] = nnet_2019_10_08_20_06(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.604938252517107;-0.55355043011174;-0.496540544299601];
x1_step1.gain = [1.69608747312127;1.86472651654211;1.99124055742894];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.4139523553374986342;2.3892565711251529947;1.5387237030389684378;-0.0090413528257867609161;0.035384302629833094822;-0.10214977081857493091;-0.1998217411662117915;1.391713783423547568;-1.9282367125379649142;3.0374207197766716071];
IW1_1 = [0.51888533185260632408 -0.52327728008650542524 -2.5112852516270129932;-1.2765339208734263199 -1.4467494665124991382 1.4715328592367409311;-1.0117680571011060664 0.91402516250531273823 2.4788837001939811877;0.45385215893474667448 -0.36649898688100179811 0.90259043287048945636;1.8197552150843292473 2.8008098531824301425 5.2947002967618201907;0.31305454804440313588 0.29212884193214505579 -0.029589954658823306582;-0.42741468962340944948 0.35165624209140072809 0.61410419008327377099;0.21635055117470722297 -0.33561686948502933436 -2.7675537615321075258;-1.5686581152910294978 -1.0630690962935196442 1.4196397877709714397;1.3700621252296063535 1.3786878406682783194 0.2560410430810657334];

% Layer 2
b2 = [0.13372020147460556005;0.58084893974739082445;-0.40133768630240801434];
LW2_1 = [0.45061309157934714698 0.026985441192728561177 0.18796966572633408421 1.9526118374769478869 0.020442462250443375893 0.03803950352042563543 0.26816492081120246738 0.27033818317027097367 0.0065689937364846271578 -0.069870730707933620396;0.77077274412794716252 0.0063416569448621357835 0.60631474941630358888 0.1537614556205437466 0.025382138379932268207 -0.035635684534016248692 2.4391815634931601764 0.30734649437636946123 -0.031618579459678497479 -0.26622797319663082938;-0.025812556930760337248 -0.00086562630072285263495 0.00060137124443622013825 -0.014149303560573447264 0.032729254820673174542 3.3405486649631348506 0.092197833313175533987 -0.033463706272622108229 -0.043549852355599376341 0.66567032598877651228];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
