function [Y,Xf,Af] = nnet_2019_09_26_18_50(X,~,~)
%NNET_2019_09_26_18_50 neural network simulation function.
%
% Auto-generated by MATLAB, 26-Sep-2019 18:50:46.
% 
% [Y] = nnet_2019_09_26_18_50(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.601516810673487;-0.554505506999398;-0.469126728189063];
x1_step1.gain = [1.69793651425724;1.86309385170572;1.97671579892851];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.8865893285840322768;1.936333932806423519;1.0773452471119606688;0.32023547369338112301;-0.0056237772570210849132;0.04084327782326818701;0.2862679057847898334;-2.6064154793493843343;2.332228266602424771;2.6912088628251145117];
IW1_1 = [-1.6073837957933660991 -1.2729712170105591529 1.5230497156577749163;0.32429521221448942558 -1.0132195769966305665 2.3342496950832547498;-1.2614152824580751044 1.1646235384283654124 -2.4293268129605576355;0.80201010908984682324 -0.6930187433445093026 1.4731788422276692607;0.29698974133735484005 -0.2279744490911002619 -0.20658338565417511123;0.27895277735784779205 0.33865848541211457379 -0.0014903036819075197138;0.1329880194956856998 0.89791499092698479068 3.9795248528760462925;0.59513014610167191965 -1.05344397778770138 -2.2743936669501345627;-0.71601305101080792159 -0.82581895053530918194 3.0699720793482359049;1.6054497398556262233 -1.2000694409363619197 0.37580083441490880203];

% Layer 2
b2 = [-0.31338115923262999107;-0.04918733286407894062;-0.2223289585654639744];
LW2_1 = [0.057275568161944533097 0.16282307856337810414 -0.2133164190120943049 0.78168253838203982653 0.49911322365284005453 -0.035526843256386345105 0.12739573589365718598 -0.13792796819417196819 -0.13765406438619789964 0.13529084134315605414;0.052807864549342685423 0.097126166814434575225 -0.031338945914674710969 0.058734679244029155964 -3.2951512323533842519 0.078697537632796035756 0.13947140565052321137 -0.08350576430051806498 -0.12543322642006171641 -0.014546160874945153474;-0.0727630832140993139 -0.042395268928078114201 -0.019203253960245983412 0.030113727569487727664 0.29916402625527244163 3.3229195138576415047 0.027769765277711848384 0.094748769112460523578 0.10998935845191658289 0.13410093858883898044];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
