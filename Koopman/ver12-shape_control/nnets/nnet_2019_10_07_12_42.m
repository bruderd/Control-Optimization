function [Y,Xf,Af] = nnet_2019_10_07_12_42(X,~,~)
%NNET_2019_10_07_12_42 neural network simulation function.
%
% Auto-generated by MATLAB, 07-Oct-2019 12:42:45.
% 
% [Y] = nnet_2019_10_07_12_42(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.05111801315361;-1.7010918120169;-1.80664336465845;-1.00270835594175;-0.909176647337217;-1.19330074844008;-0.836423881611371;-0.518196930377155];
x1_step1.gain = [0.449468687117217;0.632593541923473;0.588292154125161;0.971534469958783;0.921435957700417;0.926357191497144;1.09359428266534;2.09835571302752];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.4782036174677521956;2.5641583182278799846;-3.2635840447260870967;2.8195472617248915626;1.0944498774552586795;3.1672806572930451985;-0.058245060322127027719;-4.0535738850851892323;-3.8940672509246905264;2.5720395130549142948];
IW1_1 = [-1.262617600436540366 -0.24869404840996281458 -3.9758510794719739145 -0.30785619133884045695 -1.1259114932931142405 5.0046172712931600302 4.7494614474137648585 1.9026936418188362676;7.7322505077432728271 -5.3816392906559968878 -13.023698149921729694 3.2861204430671131504 8.621658176115648331 0.28864390509062676227 -0.58494713978812495903 -0.78854358973137450572;-10.087472694953563135 18.071459137975729448 38.220074279387709737 -6.661621603870806041 -2.5251013775307264986 1.2869553586408464252 7.9077802997158386233 1.2894328863250037465;9.357090718275767216 -6.0651867016375620167 -15.850384681318002933 3.8835945029526102168 10.28167409078207406 0.16147684172339193953 -0.48031301859966168966 -0.88923373714262932133;30.810112624366190914 33.86347521479278555 -17.592467939683697153 -17.792437983420430925 16.761697544982883556 -1.4621475149487261902 -1.6508267474411810749 9.0998400619534027811;-3.7799678114611268143 -21.865282269837379658 -7.6325912460713789542 2.3563644604579017106 -0.17571957182942088416 -14.855284619948911029 6.8710227282980822494 -2.9000538677408593813;12.581064478539314422 -15.526161707153312008 -2.5559898512444014784 13.910426056312486409 12.313113581450439327 24.069820801623190931 -12.335394761985263301 -8.3665911166528097453;1.8021016070545063936 14.789254253407110085 46.721043483669312479 -17.638254674423151869 14.06561737356080144 -2.8624647898086283959 -26.863160068624903687 0.4492397960670229673;-9.0517176210788541368 6.9945582647551374222 15.752512566277287576 -4.1767696790584016853 -10.554861753480006215 -0.53238146640239736307 1.3938426121689857506 0.97183379383046464284;1.742517119080874588 0.15787438545903115239 3.6561335838901070083 0.23664338330564957391 1.7878975206873826131 -4.7072789891821695818 -4.7203946059792798451 -1.7981152440871832621];

% Layer 2
b2 = [0.21481102024457560118;0.12080038605511769778;0.063177711098394456757];
LW2_1 = [2.2469252625495417242 8.6161830118983129267 -0.2876315910513241314 -5.513007806176839054 -0.32480715073420268757 -0.26251995109639914006 -0.18895171690060738601 0.27964273064787920076 2.5873212503556928255 2.3422825603407670947;2.8346706182173102562 2.6561098332674757394 -0.11682261206249172636 -1.6052563068976466454 -0.16352050238917920089 -0.057635458953500091905 -0.066352480066419000648 0.12946098741368036733 0.8237314480599079447 2.8473512106879872441;1.299871681053446304 0.071075512905186738477 -0.031491635565267815655 0.02702856653444619256 -0.035394639970505001325 -0.021122712262536445793 -0.013908947447262488828 0.0074346068635620784701 0.039839554522726090824 1.2645599111699938888];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
