function [Y,Xf,Af] = nnet_2019_10_10_15_31(X,~,~)
%NNET_2019_10_10_15_31 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 15:31:16.
% 
% [Y] = nnet_2019_10_10_15_31(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.12520182470669;-0.919903580947738;-0.964677203024396;-0.629975818805019;-1;-1];
x1_step1.gain = [1.02168829524382;1.07363252809921;1.1531025043986;1.59009301111279;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.7135582021372330885;0.20595039663901956728;-0.51852839084637558642;0.39107010814464537862;-0.71013237640049076127;0.32568287990480521144;-0.88363501767570651335;-0.0033072753239220681332;-1.0082243338489451645;-2.3884395859521649896];
IW1_1 = [1.8461352323429520705 1.7767589360092308493 0.34672642785943907917 -0.83815439925243451214 -0.63994794707575575199 -1.414304475141259454;-2.9287532481261653317 -2.013725136271369287 -1.1466500854854313474 1.9252188455578285176 -1.5013244884780982957 0.056068175940144779346;-0.1158977969975662492 -0.33825885515212156252 -0.3373088154354407231 0.81512789611235658693 2.5288622473343975727 0.078053916628450778492;-0.59084333420773949008 1.5987663336634629907 -0.56718724758822214316 -0.1268616038251221545 2.3175054521170861399 0.67888580745831739183;1.4697897454670800776 -2.1247105635340197693 0.55095362653451906976 0.79411432374484103303 -2.3852037014555929062 -0.66454304443530520796;-3.8425969701265270118 1.4319075560367147126 -0.87924607350719619081 -1.6219543212761446949 7.2509839210039679358 -3.928900646215013559;-0.56741255339817198156 -0.53474495576290081988 0.45964822842776920098 1.0456573844742853563 2.8394790481568468188 0.18647748824526227951;3.6594398374002548024 1.5905601503201722835 1.5305195781375544595 -1.1009489614402678814 1.7754404773861349742 -0.70971734594824931186;0.68144241866481047865 1.1937343273575451441 -0.3802622629077762606 -2.1866483974590709138 -0.024056321730966764849 -0.01447328570523857133;-1.3693339591120110565 1.345598918621092821 0.53985112218461450695 -1.8627160397015869453 -2.4401428204973369951 0.48269370718430548717];

% Layer 2
b2 = [0.010088792037521387979;0.26335251134449028099;0.43996880794179160645];
LW2_1 = [-1.1686499005666011186 2.0800142420872695936 -2.6505363579881739966 1.6488044681442302064 0.86720441786747715085 -0.1372319895645009169 2.4641296795668350406 1.8258192742971175448 1.7665512058682857344 -0.29393752407329948317;-0.43809077093075249332 0.93555634578087665254 -1.3013988149697595098 2.1180159475127031676 1.4743534229174068972 0.11397788842642531115 0.84696230957091822589 0.64567270125638143163 0.74185803623586632494 0.17490068243500403455;0.43087801495044653066 0.25834351837913382965 -0.11525409584609822011 1.4406402552087864688 1.131419838417377921 0.073745940824306688288 -0.069003129200348678474 -0.016536009889682162094 0.1050125467838273069 -0.057376214047953628949];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
