function [Y,Xf,Af] = nnet_2019_10_07_18_38(X,~,~)
%NNET_2019_10_07_18_38 neural network simulation function.
%
% Auto-generated by MATLAB, 07-Oct-2019 18:38:48.
% 
% [Y] = nnet_2019_10_07_18_38(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.33448697195963;-1.32681475214951;-1.12123419524911;-0.322782387249882;-0.917020625783244];
x1_step1.gain = [0.681414709475533;0.68170125558569;0.922200590365191;1.54667269905154;1.32189087418028];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.0714664878125379488;-6.2440979511643845967;0.90969438897956478307;1.0964729328088440585;1.9878280524409552843;1.7137039684712451759;0.37503510251349903015;0.35886941923618670414;3.9499239680517872486;9.1622883733966169473];
IW1_1 = [0.87023876757538232152 -0.98784200695884161192 -0.12968606425306811181 -0.049292553993069809781 -0.46150006874992288708;0.38549290280787490426 4.6090644353553118506 2.0499815081132846117 -4.6096482215160978768 2.2605763103924099156;0.058291207548826440288 2.2239119398519173743 1.1049684176907563771 0.72101578869714522124 -0.98889173276224862086;0.078488778688759225366 -0.43038158796046122045 0.020902662389863893577 1.1808275925651254834 -1.3253299390653243695;-0.71052422508895840547 0.26571730059442827399 2.9500183057247633123 2.2484717543685297514 -1.256742639816549767;0.20292059388441766044 0.43957520234559244177 3.6005051669320824459 1.8433686690803632313 -1.3553113866502046747;1.8593182907099969903 -1.3982337564590083812 -0.28355619695763500943 -1.0048961330079677623 0.51087755188152261798;0.038801590182648837413 -1.7466585252928690242 0.81002329572638176458 0.64171881488472670707 -0.32931974046571121928;3.1991090625209199771 1.0513697778821158302 1.6199206194690254357 2.0305002238177749518 -0.29287533397540221891;7.0470519476848849649 -3.0698732732961371283 3.1019141477612492963 4.9802674280074779034 -5.084372851443808905];

% Layer 2
b2 = [-0.15645176622480233553;0.88352063832178839853;-1.8675142424859538792];
LW2_1 = [-1.0431414833997625369 -0.24277586489119820645 -0.56440008300635646776 1.0455243078239833121 -0.95790869371909626029 1.286145019973033321 0.6393417446875070409 -1.6911494161908540157 -2.3925597638554294555 2.5240342511388953461;2.3977902963006898496 0.73890614412060762195 0.72209924674812675516 -0.52776928925823329841 -0.24316505172836155868 0.032716878659030210197 -0.81275786698487584303 0.52405855043050053599 0.59172026303964397886 -1.9329489244435555939;-2.3392419445633172437 -0.96920871441745226615 -1.8080645789523188682 0.87340423653875209897 0.99084310755618332234 -0.1390346170458566788 0.98051944729595363892 -2.0375236702905441533 2.7745411748354533721 -0.80843303139986133488];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
