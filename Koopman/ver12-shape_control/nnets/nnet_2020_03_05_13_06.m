function [Y,Xf,Af] = nnet_2020_03_05_13_06(X,~,~)
%NNET_2020_03_05_13_06 neural network simulation function.
%
% Auto-generated by MATLAB, 05-Mar-2020 13:06:58.
% 
% [Y] = nnet_2020_03_05_13_06(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 7xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = 1;
x1_step2.xoffset = -0.0504706454446908;
x1_step2.gain = 0.40463944404176;
x1_step2.ymin = -1;

% Layer 1
b1 = [-42;39.103448275862071171;36.206896551724135236;-33.310344827586206407;30.413793103448277577;27.517241379310345195;-24.620689655172412813;-21.724137931034483984;18.827586206896551602;-15.93103448275861922;13.03448275862069039;-10.137931034482759785;-7.2413793103448282906;4.3448275862068967967;1.4482758620689655249;-1.4482758620689655249;-4.3448275862068967967;7.2413793103448282906;10.137931034482759785;13.03448275862069039;15.93103448275861922;18.827586206896551602;21.724137931034483984;24.620689655171879906;-27.517241379296379478;-30.413793051960695379;-33.310333759837980949;-36.209080412969633755;-39.312262055632487545;41.440981196268801057];
IW1_1 = [42;-42;-42;42;-42;-42;42;42;-42;42;-42;42;42;-42;-42;-42;-42;42;42;42;42;42;42;42.000000000000468958;-42.000000000014082957;-42.000000047437737294;-42.000009882040359344;-41.998037978315728935;-41.787607743480684519;42.535699943610801199];

% Layer 2
b2 = [-0.22269463545249712499;0.2355434517766813729;-0.16650255581248796233];
LW2_1 = [0.13872038736041458762 0.66461185697709179721 -0.71751919544504838555 -0.95733748705875487683 0.36427348924022767696 -0.69516680610157255416 -0.43402138605178841591 0.30940119379436625824 0.78246794234581762417 0.92679435829582623718 0.53280693774168375043 0.10891349130382610433 0.65278004015139945437 -0.41936531149985023514 0.75245381156073021245 -0.78552847062385033894 0.21866200915088934709 -0.7711810256285898113 0.85642047436718748976 -0.37675061556368272253 -0.4636910743366283727 -0.89819427705088372704 0.19214764605701203926 0.75032236284626174783 -0.21999977768747269735 -0.68910898392628805453 -0.027242334842670180156 0.78243326304779636793 -0.29862128576889640508 -0.039853266193499020664;-0.92148446169223974245 -0.33840096237019751113 -0.59381102694305831768 0.91408155294005843938 0.48646855901253344134 0.42846648348933275008 -0.63296038045870695044 -0.98220763961268520159 -0.059804504510312786469 0.72840638628033305135 -0.79434235874243663833 -0.23993718833852301087 0.024197148374287040518 -0.69788971414755396339 -0.54761025018620224092 0.76369212110731810039 -0.73234215740111519022 -0.90734721385662486792 0.023270903499943023512 0.76147526771704676651 0.76934470572059410198 -0.85205714125278519955 -0.15012349802771382534 -0.96643998832601585303 -0.65147253342248856445 -0.60568027946168323528 0.99821531867700408203 -0.67289402442953694106 0.41149034744983770118 0.081755461612413746209;-0.35798282331560205005 -0.51082706406594158288 0.11669418119482327656 1.0035835812488071994 -0.35903681953024429996 0.57835514713937219433 -0.59148012258044890821 0.063478057256825384802 0.16372516966953418183 -0.12149613514041601725 0.23271428233555915832 0.53442488198810733646 -0.4121872315119565755 0.11003468272813540785 0.87566564215405018334 0.10888084990354263137 0.44951004331841143413 0.51288350444040797793 0.14236301532797909775 0.070996810566238216511 -0.088400349087058474606 0.34678300968156050565 -0.89644036631923718073 0.3361626569519154395 -0.057600369681855001502 -0.63965775321331053149 -0.47359498000894623138 -0.24517622442533226756 0.43676037867080824695 0.11984628056550401809];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    temp = removeconstantrows_apply(X{1,ts},x1_step1);
    Xp1 = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
  y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
