function [Y,Xf,Af] = nnet_2019_10_10_11_23(X,~,~)
%NNET_2019_10_10_11_23 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 11:23:36.
% 
% [Y] = nnet_2019_10_10_11_23(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.604938252542781;-0.553550429994059;-0.496540544252];
x1_step1.gain = [1.69608747305307;1.86472651691163;1.99124055755711];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.2374333638321655116;-0.21795222747127168672;1.0997418594597541119;0.042287585128120613875;-0.24921355779028198096;0.0095305707172759161067;0.044327804517161728537;1.5120822255408195023;5.4909063038375123256;3.9572349425217341334];
IW1_1 = [1.2750684995674932409 2.5476423505556171634 2.5720562521579943827;0.13325891146557475309 0.49053619843195406247 0.1833426715024217557;-0.53729244591647928875 0.058977254508724569204 0.32781199437841374023;-0.2156061333401499136 0.43142924521324083065 3.8271199282361965111;-0.34007764316629912615 0.034106519460980491698 0.20104740984050478714;0.53091834614234778567 -0.40602038951488822471 0.94658506499202177409;-1.5480973035118827941 -2.216648172977186082 -3.8185515176617292887;0.22573726538452476564 0.78460115853074152703 0.30151126954543339131;2.6059761528536036224 -1.5978282643382741846 4.3960207774838959693;1.4811005981970146728 0.73100108706397914915 3.002354735619310766];

% Layer 2
b2 = [0.69670068276436947219;0.28287438870450865025;-0.31609486562548477773];
LW2_1 = [0.053474203285325656865 -0.38603501650511806709 -0.16673200303626756202 0.12695094195432646278 -0.38922891524615971237 1.3348810586871202588 -0.039836727657264918434 -0.016632932476405244693 -1.206810484628786595 0.53959248001033677244;0.057434411457168342563 0.93531616573046427732 0.81752605010960721632 0.14449115637632542475 2.6861790871248030221 -0.12237839257652632918 -0.042674491509335506223 0.52549352129951187873 -0.94858324015524464468 0.46213932992752698725;0.061793511611171240971 1.969574899983342231 -0.58320206197858803776 -0.00044909054429803185564 -1.8536999752406648767 -0.031520663303430077051 -0.052416340151802048863 0.94744853296584574665 -0.44168505589922768539 0.33935783756320864191];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
