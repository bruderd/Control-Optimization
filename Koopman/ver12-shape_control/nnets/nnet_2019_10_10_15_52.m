function [Y,Xf,Af] = nnet_2019_10_10_15_52(X,~,~)
%NNET_2019_10_10_15_52 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 15:52:42.
% 
% [Y] = nnet_2019_10_10_15_52(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 7xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.870529476424574;-0.653758942446831;-0.723837594880846;-1.55242771955881;-0.968176111583366;-1;-1];
x1_step1.gain = [0.721388909521628;0.873096891808657;0.983150215685652;0.934521236937008;1.39227634850687;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.1534764602490708008;-6.4163001244170851933;-1.0498061065792536617;-1.0187165307540684278;2.9896265011605924755;0.32777937131552425942;-2.3699208454640419141;1.9719117165145769732;1.1097601839237476451;-4.1472371479022935858];
IW1_1 = [0.40297604065947911778 1.4202638309376727221 1.1491754483268514786 -2.3575072009965483133 0.00063549612751123696341 0.99929100088489808407 1.5413330660929029925;-1.2565530284453754195 -7.858931806643751905 -0.95153749526040143358 5.6968230129257699801 4.6701023801477319353 6.2356108664875833369 6.1923348101083881545;-1.3446095862459146453 0.87231148022553950394 -0.21664006317343598162 -0.75597281924713666257 -0.29814384727840370637 -0.12118406757016099429 -1.142675491393290832;-0.53186933727050134113 -2.9939468212519604329 3.7819508586080026191 -0.35499379983210321843 1.5011206307770239565 -0.077476096470865715715 -0.49278144226868864086;2.4114435038548185375 1.6567939244299279 3.8300345350829432256 -2.1292108534928297914 -0.37707383536475741481 -1.6521377711387084108 -0.091739719127131816312;0.58307621427252254165 -1.197647088884497224 0.14662827319020876882 1.1646562571929612862 0.52983695445706535665 -0.15246617318846597544 0.91155315400468817089;-1.0848723513182190192 -1.2218173103613212405 -1.1464832081148836895 0.47678353500655068498 0.015373217852223593563 0.45547359652423369258 -0.071894407314355687766;1.5887336944572598707 1.3068058568240370487 0.018026783822806376201 0.16399465275785435336 -0.70259436557291721215 -0.52950386612982902612 0.43589640636713766764;0.058100018708425918423 -1.3642211930344541049 -1.2725840537875481306 0.93184162983601559471 -1.2962589947256866196 -1.4952924763074397774 0.45582911788781987905;-0.94642788721150816755 -2.3906749568850895749 3.2278159782034996361 4.5341620074523669714 -0.033805091141544757471 -2.4476737391511020903 -0.85277668393596017804];

% Layer 2
b2 = [-2.7024902715751082383;-1.4728980240146267722;0.40794255388203737311];
LW2_1 = [-0.080638082922373052752 0.0075699321404628693369 -2.7616497724466340102 -0.71621156462224955241 -0.44327573849436258113 -2.2813768529730786838 -4.1031236949354381593 -2.7459278401064688424 0.87576089600482576181 0.39594854955233549365;0.008308954683560403065 0.12741685076065384363 -2.9348512294123043631 -0.56253066415140573486 -0.11741169033790002652 -2.8516883760498625833 -1.8469975855741289639 -1.8816125305457649386 1.490638345665770359 0.61048107054298839103;0.574641767316296459 0.1538559454281990535 1.3127838064541441643 0.039334311414621146719 0.0069581083441633516384 1.2195546567308899188 -0.84273786017661689307 -0.36038321287526853265 -0.18854337186804848159 0.05326557757604704485];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
