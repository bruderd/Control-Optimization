function [Y,Xf,Af] = nnet_2019_09_30_10_43(X,~,~)
%NNET_2019_09_30_10_43 neural network simulation function.
%
% Auto-generated by MATLAB, 30-Sep-2019 10:43:18.
% 
% [Y] = nnet_2019_09_30_10_43(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.50566973365884;-2.25694169526187;-2.31692614454142];
x1_step1.gain = [0.385388843904636;0.454451989534436;0.464244179672087];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.7638454139042618607;2.4122706581425998884;1.0855779135323573303;-0.24827623361160361393;-0.30874948795258899681;-0.017346083662673959097;-0.46500349056651812951;1.2119010420591416199;-1.3900564710506244648;-4.402704218732632846];
IW1_1 = [-1.8642030262525493001 -1.9627924783153107846 0.47371925128426717322;-1.9170270541565719302 2.5903258641083697356 0.068370869645593496111;0.15205712675087348917 -2.4281129044109492909 -0.68113577149711923564;0.67197262138100155582 -0.85087339134421169362 -0.17649460896671290144;0.72845699280622255856 0.87050714323689792895 -0.38460799069431100827;0.25636271147036054918 -0.0068437159084809877016 0.28729882283676505539;-1.5806824737274329795 -2.2165872293930917181 -0.85874713979078887149;1.3784815918053237027 1.6565658616615410725 -0.68990162410989408492;-1.2709999159914602274 1.5026681782885551453 0.25097233406154800806;-1.6927590136304431212 0.4875310242646647696 0.27159422567623520139];

% Layer 2
b2 = [-0.50665689494850163488;-0.1348500461917081783;0.3023564139619590585];
LW2_1 = [-0.11326103889334993013 -0.0041628331972341165237 -0.0083829087193221223789 -0.072586394032306406077 1.1529664402900565712 -0.19869259303058578459 -0.0030209629984548937165 0.33874511359868275662 0.0076588642413568525091 -0.71321100898015821201;0.071042524393300249264 -0.0017448329104989062852 0.0097752136573133197039 0.23716232269974729663 0.056937486890764846259 3.810749741344841901 -0.0091060562655034156532 -0.0069198213868168932314 -0.065704572397021376862 -0.1105093188430154999;-0.10092154350331086765 -0.10229885588759730919 0.028783350230199216541 1.3795821871834361705 0.37665966154194246984 -1.6942072142344499763 0.0034299526978287136515 0.12195861893693424327 -0.44924310746079398893 0.080087293474490117706];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
