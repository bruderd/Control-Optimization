function [Y,Xf,Af] = nnet_2019_10_10_15_33(X,~,~)
%NNET_2019_10_10_15_33 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 15:33:30.
% 
% [Y] = nnet_2019_10_10_15_33(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.32113880804237;-1.27503539837562;-1.18817916448048;-0.928038264067655;-1;-1];
x1_step1.gain = [0.822633420854031;0.833854785567747;0.926003062509369;1.26021758813278;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.0279567751440201739;0.79791351629144857682;1.8064825532651564988;0.22311863041429791377;0.6868622457189976771;0.92227575895012048335;0.58773501611727108074;1.9378638350350123609;-1.8623021677132802765;1.6489636484066900746];
IW1_1 = [-0.84607948443443281583 1.7802840707016656108 -0.55321351495847592705 0.77075749776276847314 0.10688573803099039872 -1.9281587037196308287;-0.28868611058584697782 -1.0424778536087919711 -0.60857304775851095435 1.08845894831791834 -0.013784143766456704097 -1.3670452640958377089;-0.26328813636907744122 1.0611633631599126648 -0.026472567976786987032 -0.91966409585624098177 0.332873192056692635 1.5473562898043917713;-0.34039434906922239055 0.83796416223528591427 -0.38081892171163028715 -0.081144273893349161408 -0.69174958276722631201 0.015743711798895484999;-0.58588663705832066952 0.4995146369445239154 -1.4966457770537400229 -0.077962332937906109187 -1.3132423081080883964 -0.55037023656525219106;-0.39596768132056980871 1.407071731864680153 0.015398821547676310589 -0.6468447606048514098 0.26736867714463979917 -0.9193145866793179799;0.61821126642094892389 0.024981791135234923673 1.2163155609904572341 -0.33872245597002614836 -2.4151136019952579304 2.4572785729537311994;-1.181102618014294503 -0.10275703876974857931 -4.2409499044887359887 -0.60552010795290056588 -2.6876036551375368511 -1.8165857647621290738;0.10407940517419057846 -1.7458218471489765911 0.34065440973710930939 1.892800755928574219 -1.9421045196534383326 -0.31165824953753096249;-0.93184132120430951396 -1.7590244559626626586 0.1424842068446063037 1.5977815445439103037 -2.1866647918829671404 0.4044480221787733476];

% Layer 2
b2 = [-0.16053800736911885694;-0.51260306019559476187;-0.60467256717360839957];
LW2_1 = [-0.92849267901874144027 -0.23893769011223678356 -0.75663380183643558219 -1.2216616485369735656 1.8193947090743187722 0.36793141236317539189 0.36198568077683740407 -0.55102774837672663377 -0.38586620761182205408 -0.81517479286775795799;1.0255134956755596054 -1.3731581173437783505 1.93386962178506705 -2.3963564557506207287 0.50059537952094579349 1.1437289337068603512 -0.36065332462433152827 0.29984091560823583622 1.1488266677712217767 1.0902679544566533654;0.81884008488922721547 -0.94372544421150528215 1.498773286035250063 -1.387056083264444073 -0.37787950406277581727 1.0027969910274674437 -0.35038589376261375374 0.50539673735049950309 0.9348370701521877546 1.1957138563819644794];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
