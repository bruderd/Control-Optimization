function [Y,Xf,Af] = nnet_2019_10_10_15_00(X,~,~)
%NNET_2019_10_10_15_00 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 15:00:30.
% 
% [Y] = nnet_2019_10_10_15_00(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 10xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.keep = [1 2 3 4 5 6 7 8 9];
x1_step2.xoffset = [-1.12520182470669;-0.919903580947738;-0.964677203024396;-0.629975818805019;-1;-1;1.99013064737702e-10;-0.546889646064646;3.55320079659861e-09];
x1_step2.gain = [1.02168829524382;1.07363252809921;1.1531025043986;1.59009301111279;1;1;2.00000000039803;1.79918877457037;2.0000000071064];
x1_step2.ymin = -1;

% Layer 1
b1 = [1.9349819168309072559;-8.5005964414825818665;-2.2098407723740609576;-0.54152508631007689743;1.8985840554181241391;1.1881464583117884448;-2.4283176151805219156;8.0652744986329896193;-4.0090802365708890775;2.3671441456154207472];
IW1_1 = [-0.83051870561205842769 1.3983183224571917869 1.9113028293204599173 -0.48078529977347883584 1.0783735273370989027 1.2598502530823880718 1.0255190513314138556 -0.16476936625715940532 0.37672517709596720081;-4.3355045488138763687 4.7454620152114541654 -3.799634091406696168 1.29686628194704201 6.0101366478174327312 -1.5482420805224037519 -5.6676549266622187062 0.85695982506711376736 -0.89941396432859332943;0.53461722423830493334 2.3835876543303222697 0.71293519811672512176 1.3960344120638872312 2.292644372651322815 -2.5413878619061294195 -1.0713935922691477654 0.35961321431517639935 -1.3854114925289264804;-3.1113538637352173843 4.1878597927733558492 -0.52629030968373424759 -2.4157925332506064997 4.1340030711119846174 3.2569822148932501271 0.02295315064849561687 -1.669273445980279158 -0.73982634394002977363;-1.3789245426831133745 -2.4322973297544119298 -1.8583858318832984224 -0.70333207566931621457 -2.0814970389871194634 2.3832226926712838377 0.86254717884857345922 0.18566259085405584228 1.4509557352223065863;0.84446281385362254035 -0.65091603135916831224 1.1145645125905037087 0.12812665048000551615 0.34418646308996153627 0.43568215943656984912 1.0838573082929745528 0.03912007684369465943 -0.17298296842624771852;-0.73958979985207962127 1.326564900973504324 -1.129575324405872383 -0.76093885316775500272 0.63976703712899962717 0.11791330242627799663 -1.2261050232721539821 -0.62402143574666613102 -0.085320331115100941921;-0.25564870121286448201 0.78861852734970150358 4.1231386310741520163 -1.3989757252684400513 6.3522199791454569962 0.29883937274666061423 5.2566582597104316577 0.63687790891131068616 1.9639935197391529265;-2.9088691179927921304 3.4468924585281577322 3.5148918757824301196 0.10578705568960142247 0.0029674832922043717365 -7.0332479465403752172 -1.8448627835953907983 -4.7086763298380480691 -3.9998050743735582557;-0.53583580066872149583 0.79840864041703007992 0.60250651059892157413 -1.0034232189522211964 0.72502445124530789933 0.152494149752300856 0.93422602189037651232 -1.0492344125391819265 0.89101567165911332857];

% Layer 2
b2 = [1.2646485121392863071;2.6449455157656167614;0.81077292433715986153];
LW2_1 = [-3.182484273976011746 -1.3215068423888287619 -1.8518996452068257064 0.52678770893323390023 -1.7074014625462632377 2.0480098496314136369 4.057954944035069289 -0.62787626435699717131 0.047695675150008318144 3.1249091987729684661;-1.6061619725516593782 -1.2404234427710576494 0.20544913501263106781 0.058014328729537691098 0.085236541038684082716 1.5914926710530261644 4.7927839609589852898 -0.091680333531881139097 -0.18815804353313361763 0.95855557530333435068;-0.41869781468999811569 -0.60381022775879311659 0.61509323818418482066 0.041877429339582009082 0.66895019149874690445 0.4873524359919586546 1.7691154065809144846 0.312766886036398295 0.052102010260419183429 -0.040203673688643873363];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    temp = removeconstantrows_apply(X{1,ts},x1_step1);
    Xp1 = mapminmax_apply(temp,x1_step2);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Remove Constants Input Processing Function
function y = removeconstantrows_apply(x,settings)
  y = x(settings.keep,:);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
