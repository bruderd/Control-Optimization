function [Y,Xf,Af] = nnet_2019_09_30_10_29(X,~,~)
%NNET_2019_09_30_10_29 neural network simulation function.
%
% Auto-generated by MATLAB, 30-Sep-2019 10:29:02.
% 
% [Y] = nnet_2019_09_30_10_29(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.48440784053919;-2.26181019100452;-2.3261805538093];
x1_step1.gain = [0.388436294606235;0.453290103513187;0.462898622824384];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.8652252274766016882;-3.0185196954407298442;0.86639216152546916216;-0.92027634834670424269;-0.0093337880149570087024;0.27830207685152114072;0.51992932423664572905;1.5716965080903750884;-3.1492533057750562442;-3.0771823894631848972];
IW1_1 = [-1.0182167581349768071 -2.6218488914580082572 0.73900886724618652934;1.4136314434344485758 -1.3347161331012389329 1.5504979774896743283;-0.84026892700358324362 -0.37696515288828014167 0.90075282835084991007;0.66314467515956920796 -1.2732361273666945589 -0.72172768725237279597;-0.38053639866697791527 -0.016618299361391555141 -0.29937207817182148739;0.40059485652218501661 -0.77085036152315866698 -0.48090938671537042381;0.67450144507733489352 0.26473812622990944288 -0.69394370898777291146;0.68034334965154941166 -1.7098940595899316808 -0.75326183565546833698;-2.3701077868707214336 -0.57127278758939770142 -0.69994314234421117771;-1.997811202513380735 1.1822266051992225133 -1.3379528126345934247];

% Layer 2
b2 = [0.13242679126721570992;0.030454063207597734109;-0.024163274978699744722];
LW2_1 = [0.20861293443272316273 0.14260203622669956336 -0.80442600716724754761 -0.35971915449164282297 -0.32845095472115876101 -0.6627723144094950225 1.329232762257156697 -0.22387438960735772664 0.19517872439536021467 -0.084863363844420447446;-0.036835377040300272544 -0.041367079596090358673 0.10317419763377877473 0.072045313763734172841 -3.3012364997523242494 0.14931530341694607134 -0.19083210822691240582 0.055975530266924547473 0.037953920910472949135 0.081776926261716093025;-0.039499202123273007004 -0.078382831247945206066 -0.22144203517668498149 0.40409978946893410079 -0.14186220819281750161 1.0470543332814878923 0.41482948805332281461 0.1649401384134023818 0.030675369570221093507 0.045866509151172185632];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
