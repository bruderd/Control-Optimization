function [Y,Xf,Af] = nnet_2019_09_29_17_30(X,~,~)
%NNET_2019_09_29_17_30 neural network simulation function.
%
% Auto-generated by MATLAB, 29-Sep-2019 17:30:55.
% 
% [Y] = nnet_2019_09_29_17_30(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.50566974681007;-2.25694169704041;-2.31692614413613];
x1_step1.gain = [0.385388842041899;0.454451990012018;0.464244179673202];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.368151239798201857;-0.54716289792677530457;-0.3108405919791607519;-0.092695070701797929735;0.43429140494542683992;-0.63531405901350601617;0.97705927138538217758;0.83906791143688030932;-0.86471442728739800199;-2.2924541019037549816];
IW1_1 = [-1.5385012042792796105 -0.82231053150534794138 3.3596843584641042924;0.91320706325784528623 1.089690060857819276 -0.70030493317063635672;0.20351177289296470962 0.70009681587117156276 0.30134113034583626112;0.54036609540254476602 -0.0029626718033812808259 0.2915517733126652411;-0.40163673855894665987 0.31981296141990772641 -0.80570563448389820316;0.89798144371293764365 -0.88511786844643813854 -1.1019574726735479331;1.0840015622980121446 -0.4470414321113354017 1.5003556365911474568;0.92791972278368017868 -0.79236468248134750425 -1.0321346923513010641;-1.170564652583331533 -1.3730526382122389961 0.74441371787585963737;-0.75360156572318748314 -1.3299492636292211678 -0.63128326348138574797];

% Layer 2
b2 = [-0.048554555371063380653;0.47122139255510747669;0.09537718679972929936];
LW2_1 = [-0.022020259213848376867 0.58038522502545897286 0.42646228551299919518 0.47875897356806179639 0.38023873831063398354 -0.015562895579147825384 -0.077579698664446403167 0.017871015066705409069 -0.41380238008065628463 -0.16561545242133549061;0.0074192094854833006562 0.10054407239587340173 -0.25392386263542343627 1.6210491823930417432 -0.71579560194336089296 -0.077236638591262188336 0.22914303064423202638 -0.079294606907001533025 -0.08801758161605346964 0.32230250087062578546;0.020702980247513394496 0.10268234401518420984 -0.59084006502495489688 0.40303608881103958339 -0.002846204568613093424 0.61270659477465927445 0.011974958349958242029 0.62931234851025130705 -0.038502051455063884822 0.20858347003970412192];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
