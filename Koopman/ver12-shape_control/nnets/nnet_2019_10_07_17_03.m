function [Y,Xf,Af] = nnet_2019_10_07_17_03(X,~,~)
%NNET_2019_10_07_17_03 neural network simulation function.
%
% Auto-generated by MATLAB, 07-Oct-2019 17:03:11.
% 
% [Y] = nnet_2019_10_07_17_03(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.61801073792437;-1.39324170158587;-1.38506603682853];
x1_step1.gain = [0.62315006704972;0.699300701266655;0.658357661876592];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.4546292607700026522;-2.3756808116911978246;1.2570582525780460426;-0.65346243383050017783;-0.29501072542532502663;-0.067879754176595322179;-0.39439719872809969603;0.89966991618954561538;0.89481169139307914495;3.0680317570366737456];
IW1_1 = [1.6733767963456300798 -0.36547850574089163489 0.91828698391385499278;0.77170372018633626165 0.71777944642582758306 -0.8234975733670254483;-0.32182315746289769098 1.502828428985025111 0.67415063506279737648;0.76434041716540379596 0.17277888513909378521 0.34441303911780263292;-0.11978648302885634702 0.54225656438012126426 0.26785320117532723794;-0.40466871178146313071 -0.26685901258877181563 0.42295428327377476707;-0.9243836954520875393 0.36378126949515243727 0.59241844081767802699;-0.15215266616103143016 1.0642429861403128744 0.33512568221953464853;1.0002682226918835351 0.25490262327515722518 0.45412024442792242596;1.3906565068381893102 0.78573921403854940504 -1.5287724053704780935];

% Layer 2
b2 = [0.58128422233409704489;-0.082356839825158928425;-0.32006791796488032187];
LW2_1 = [0.05686755672151151686 -0.13457741501522346717 0.42149598071059024562 0.049796706004791198297 2.2108479853404463533 0.41199364538312399642 -0.016443201788877141734 -0.19113474277750963637 0.06047132212527336903 -0.13723151707885464234;-0.48360384288859459279 1.5592329228867412017 -0.25524586229273055205 0.099595614746598407074 0.14825681864149969913 -1.9502598529558408114 0.025889597838593528256 0.48566007832495561303 0.043463980373767155396 0.89716414084860940381;-0.35653207997729730039 -0.49573275581532821876 -0.18789743371369735381 1.741599825406325186 -0.53897326066940909328 0.93105956930375377567 -0.093042578791775742975 0.16459231248420566618 1.0432771652855341582 -0.2937912771714949467];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
