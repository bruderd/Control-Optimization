function [Y,Xf,Af] = nnet_2019_09_30_15_44(X,~,~)
%NNET_2019_09_30_15_44 neural network simulation function.
%
% Auto-generated by MATLAB, 30-Sep-2019 15:44:59.
% 
% [Y] = nnet_2019_09_30_15_44(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.50566973365884;-2.25694169526187;-2.31692614454142];
x1_step1.gain = [0.385388843904636;0.454451989534436;0.464244179672087];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.3922031357766915249;-1.7777920565972955558;0.69977126762497754431;-0.28923762116989348847;0.45526692591383571829;0.44955568234184756227;-1.091047366627928783;-1.6969664486395494851;1.2085746513548478731;-2.787752286219158826];
IW1_1 = [-2.7010610141228705849 0.9674630305354661175 -0.77341479005316726703;1.1696349427581744784 -0.57273003167470271091 -0.31527217027368209523;0.0051677524637462925183 -0.37406860815747650095 0.76751663808298942193;0.58840819576514424849 0.63724497096111776262 -0.11734040156641141472;-0.86341721467363730103 0.91506262828127449271 0.89316909827540003075;-0.051974750960548127265 0.32569920525465018146 -0.69214054151705273199;-1.1200327044188276293 1.1679894336282041767 1.1516723651988280963;-0.15901109458764337012 -1.4706520756581857867 2.213157192858397071;1.1709007138978102525 1.5397683878297510063 -0.34582795231486312959;-0.94619283952468991039 -1.8352136190143131245 0.87078675054767229469];

% Layer 2
b2 = [0.6201592087293398281;-0.16335556417553559472;-0.22079616679226918285];
LW2_1 = [-0.38426038682836827221 -0.41142561685835860041 -0.20192881720920521915 1.4188875693833329361 -0.021255284086898480755 0.45777165848487644251 0.020713717050432414735 0.015047105365392766246 0.33613312589946997555 0.50013487588513316773;0.37436668379495396941 0.17978067067795860945 1.3718954591865282211 1.2921873886254766628 -0.32310966622291564798 -1.4276142341368773803 -0.20858807087658562396 0.11720103519945204718 0.2686816582809625209 0.080387643391734153742;0.26883289585958852763 0.25855398339246793427 0.060812712191083077851 0.0090105916692911503657 -0.88095755558066057844 0.093351543254137622774 -0.57689837472668670237 0.042440330380852618608 -0.020415074363573069288 -0.216524068498089306];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
