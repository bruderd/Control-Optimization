function [Y,Xf,Af] = nnet_2019_10_08_10_42(X,~,~)
%NNET_2019_10_08_10_42 neural network simulation function.
%
% Auto-generated by MATLAB, 08-Oct-2019 10:42:46.
% 
% [Y] = nnet_2019_10_08_10_42(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 14xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.05855211167302;-1.97936154905964;-1.88675345050409;-1.19599775190921;-1.41809208140057;-1.22549968849647;-1.04177060416795;-1.2334991262928;-1.41334674322073;-1.41727382651375;-1.24508800790262;-0.882296704460056;-0.896212550095312;-0.92812205347467];
x1_step1.gain = [0.490270076942195;0.49844891949591;0.526075739458941;0.839313679056365;0.634330560787339;0.81619729170697;0.673729182037409;0.896136467990449;0.721698644085426;0.815050471042057;0.821138831796655;1.00517541020751;0.950629691183912;0.993293981560463];
x1_step1.ymin = -1;

% Layer 1
b1 = [9.4191530077796166154;5.6191473239323750377;34.101068078348703239;-0.32007834083392744384;0.6943162244280653983;0.73045635383997165047;9.1404989956561273345;-0.46316297641299875032;-6.8618229215284527456;-7.4689547337594870413];
IW1_1 = [-11.908739187016537997 -16.46943665890757913 12.470125485028653145 1.0171940522648144078 2.7043954613899097161 1.7047856040387963095 -3.7047476605871167976 -2.7051186743366280041 3.5185409627508645869 -5.1371564889865775072 3.9512987710818605613 8.3167063960260207978 4.6614355465394039513 -2.206251137312469357;11.082673902063445937 -16.629638562111647815 -5.0737199543046171968 2.4771542337547516333 -5.8361386740878380408 0.92614729014155483533 -2.465766689080141294 0.80874090882947080594 -5.2625801466071973067 1.4771923060318903342 5.7507836082886321094 -1.439594802854828659 5.3521886412644468223 -1.2952382274819458363;-54.069915677450168801 9.6828544847613624569 -28.956406229477313019 18.076977380160361264 13.592930982556424624 12.343698844041359308 18.466232270109628644 -6.1617748282504098967 2.9481884668845363962 -6.6327214257499704786 -15.687431537854868324 -9.0461773761195676258 23.557441750571385342 -6.2441050029656253173;0.93363014063520888275 3.0938028762345202161 -2.8459370097184675252 -0.67758096600205186544 -0.039376659391235982466 0.26882177498053005937 -1.1286217732402459291 -0.67160109945337720383 -0.21848102839586899804 -3.6332981541354540944 2.6222387160937605799 2.0121189103124268449 -1.7530937876378016593 1.5379716045030265015;-3.5151385976760787244 3.1919762605931922828 -1.6800873650412937454 -0.15715602287423713346 0.94642321402392748375 0.57996137494016575253 -0.88817939870771389632 -1.0082038234619747907 -0.063071001534788742604 -3.766737806755429574 1.6214658438023343834 1.2054116752737471518 -1.6003609878255402599 0.5463149658913208917;-0.078951079985812314121 2.9225916252040753385 4.2057122424988611087 0.22723952041810654978 0.085706226021299874995 -1.3529570845570493276 0.88691932847253207584 0.41876723758484418747 -0.27049520656012937536 0.089768391057667457078 -1.4072879841219709807 -0.89598285756074447228 0.73350262175810265752 0.80559819316025438329;-1.8179168280469324426 2.576668971099186134 16.118887352766432031 3.1428775389659175943 -1.652467301356038254 -4.3330134108662239356 4.6135976071430926382 3.5311548257634308712 -6.0497204794089727287 -4.5574028394831263 -1.2160442452651973877 0.26871770698311442382 4.7284683122384203458 4.0807172328656990956;1.339266225297196744 2.2844114827354076169 -2.1113884533990328052 0.032507700915133115604 -0.56588768125538169151 0.077059118902812986929 0.56469103186546998341 0.36172144508900372362 0.32239011642719267448 1.5955159025889351643 -1.1450958287499550803 -1.6898734570931197574 -0.029912964153401291889 -0.47271533027967038709;2.320396933020014707 -17.800728596864974662 -7.9182308909047049994 -0.87427815494737226576 6.2783539368472442987 -0.69972126200491724379 2.4274885517897608622 1.6490609097945925221 0.52039082972116712522 -0.4083780824394205311 -3.8028231384144253191 1.8899560035831799443 -3.396081937032956688 -2.6919253108792755569;-9.5421727235758169172 -6.8588036051298049145 12.007044850445339534 -1.4793775603251260176 0.21318278372138493859 -0.38050192480533595596 0.063520882787533539116 0.30806267019378158478 1.4045895262416350224 6.428769047784927082 -1.1244545157875200925 -4.6196581047524416519 -2.5508989890230320263 0.88588579881459561527];

% Layer 2
b2 = [0.050368919518255950152;0.12080732434442534307;0.060955587769898428308];
LW2_1 = [0.13438043036120897455 -0.54379965356296333656 0.49222403318144702933 0.40343374972195594763 -0.62091084892229797543 -0.062512451772687188667 -0.04837499984382748891 -0.13379418159569281266 -0.31332336192645438011 0.10235550280218068397;0.17772093260994983877 0.43031449789558534613 0.27118800839135781544 0.15980737088832475123 -0.010420731254173856359 0.56381370740659164653 -0.53831597253474194886 -0.0074060727428411632367 0.5064290876597142832 -0.021553247062344921964;-0.62170037395468868979 -0.095173998185867692001 0.066934973634302452616 -0.30854144327914967416 0.0063706615881132739113 0.056387392727914993629 -0.37760579786130993307 -0.54000657202223012465 -0.2111640048860090324 -0.64795238335339222502];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
