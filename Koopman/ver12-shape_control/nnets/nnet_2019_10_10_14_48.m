function [Y,Xf,Af] = nnet_2019_10_10_14_48(X,~,~)
%NNET_2019_10_10_14_48 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 14:48:26.
% 
% [Y] = nnet_2019_10_10_14_48(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.57707038643919;-0.987335087512719;-1.12206007992578;-0.753742517660871;-0.470900171877518;-0.513068578901317;-1;-1];
x1_step1.gain = [0.611017880988203;0.929649665454183;0.92680551255035;1.35008489140216;1.82466707401778;1.97124588225014;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.7743431759320822394;0.25640441605403085923;-0.58763906798740506154;-0.38860527137181538615;0.13315590129119292406;2.4565994814376987954;0.18139443566352167481;1.3209272029886272026;2.0960038360335953023;-1.6665323213915441691];
IW1_1 = [2.0780100904478584489 -4.0619308331298435988 -1.0237366162764485189 -0.65808751998071635114 2.8473253703782015478 0.29106385198434492345 4.2313213419488908684 -1.2802116776416683219;-0.49761396694147658204 1.477862981053384317 1.653227304465509917 1.1261993197516635412 -0.64695881748957173585 0.77605510835190805174 0.17313110838665909941 -1.8326915112329391633;0.69185296969583975901 2.5596147990476572076 -0.61899061099955421383 -2.7551470219748437351 -0.34038797378777624347 2.3086243989982135894 0.57081979913820679595 0.16719997183805898611;-0.60381741176216430222 -0.90581277852105834825 1.7456953313241057035 4.9111514791530730406 -1.6474368247315276381 1.5690300129447123378 1.369547310311076016 -4.9790346179891704637;-0.21047002304495004976 -1.2960873677916560087 -1.6504428784965194943 -3.0251570562676377563 -1.6643629127412846724 -0.15697491168485611102 1.8384086063061317873 0.5745946768536478455;11.51399071561802856 -0.14143962323275038884 9.8165909680171949958 -2.9456028999579664251 11.203583000291835958 1.9021036828474282565 0.074423341783479382561 4.7339796218646368331;-0.027398569617705741813 -1.1339593502715492601 -1.2039587594209804067 -2.3646422339366837129 -1.2849488334511622867 -0.15195268686421817272 1.2875991744063928213 0.51253980703049040191;5.6786252083616020059 -2.5396141321944036839 4.8125314481730123717 0.4865940529948324933 6.6114303764860054002 -1.6312911000690293317 0.54438906383278573564 2.6274138831325086763;1.1862420397594954924 -1.0969530371336750907 3.9113581834007487004 -4.1410617874618544931 -1.3374549945778144711 2.4821951945938236506 -0.5202166540577816134 -3.0485006404756784804;1.9296988432310142603 5.0843029186680483988 1.997193329085974467 0.89388642020066511051 2.0897469064748279699 2.1995653241410009215 -1.1696831539317544824 -2.228271327648057909];

% Layer 2
b2 = [-0.053744725230785751757;0.030940221324046640605;0.1228051608597224148];
LW2_1 = [0.26136856772146405126 0.7874587233510322859 0.44181925068148542035 -0.26894433107724302623 -0.7538392977856913646 -0.37765713345898499487 1.2800168270229819178 0.60660588260289871609 -0.21165133192359703029 -0.36612829879152603008;-0.034220613022121329494 -0.32092521237111920618 0.60891582120022080815 0.144977661805545055 1.9766671427356934387 -0.33582183378580937605 -2.5773210570731066582 0.53951329172795114975 0.23844777918735979294 -0.33999426044639402544;-0.11105432972934203839 -0.46260931488634965403 0.32537796149707148841 0.23585992327209764907 1.2006971150227012668 -0.30249823967408639991 -1.6197128875147439597 0.33816640595856084506 0.16556197491396104637 -0.064219513281872336874];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
