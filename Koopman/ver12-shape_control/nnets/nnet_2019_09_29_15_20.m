function [Y,Xf,Af] = nnet_2019_09_29_15_20(X,~,~)
%NNET_2019_09_29_15_20 neural network simulation function.
%
% Auto-generated by MATLAB, 29-Sep-2019 15:20:36.
% 
% [Y] = nnet_2019_09_29_15_20(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.57327791626395;-1.43268029664809;-1.38738523619758];
x1_step1.gain = [0.622332510827639;0.690342620443814;0.743413104360809];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.442415050675001309;-1.0608004961512755848;-1.3974651452597466328;0.16349639559306378134;-0.39000468756909467682;-0.93568719727374061179;0.39572565304659634844;-2.4398606456025584421;-0.089734927275532366808;2.4122932652527864228];
IW1_1 = [0.10548091051890705339 -1.5618185728824089953 -2.8306816581315983328;0.20361593985706344379 -0.7187477023230027795 0.54498235736104583271;0.81792643879798698769 0.51220417206756863049 -0.34019716112750708614;-0.063290506397765788904 0.16570904415489495776 0.29655824122578189339;-2.4453067634318741419 -1.0327480599016212182 1.1418300502505744909;0.50386558751260979161 2.0193454318584520557 -0.85696185115151413125;0.11442229341636038498 -0.44519321999071614915 0.30763938891506259488;-1.7703269670181018824 -0.84022494181067430841 0.72574127157059764581;-0.38694996636793377309 -0.39198329428997785717 0.15470665555881543685;0.39692002695958827907 -0.75500640732304613589 -1.292410621058754927];

% Layer 2
b2 = [-0.016481211532895403971;0.27970464876448736247;-0.43172135113536846962];
LW2_1 = [0.022227264623156221118 0.66710548957246118551 0.21477353285784284154 -2.3386305440048360538 0.0015481797396185526059 0.034317375717947011526 1.9348805858904061239 -0.078453629666668092679 -1.8361831306984925938 0.17700933209640590249;-0.012973921883097556257 -0.19730638843484671341 0.78137111361291200495 1.3526677519332908073 -0.079765060415078331557 -0.029352471816742862348 -0.7744911764289498235 -0.31926686486487804162 -1.2207170482308338233 -0.10287548561560860838;-0.0042685630202373460451 0.64993450770757088542 0.012136074887583475634 2.5330665811556518641 0.013062678863417312783 0.023022402920634409823 1.9157095552323171184 0.0053236481922077283011 -1.1204588263742587539 -0.27975147469270972289];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
