function [Y,Xf,Af] = nnet_2019_10_10_14_44(X,~,~)
%NNET_2019_10_10_14_44 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 14:44:48.
% 
% [Y] = nnet_2019_10_10_14_44(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.67910110601272;-0.818672957097964;-1.34915139956283;-0.810759569284124;-0.451065121033642;-0.522762459044255;-1;-1];
x1_step1.gain = [0.666443798096683;1.14606263007027;1.00617600312944;1.28351228010205;2.05064836574591;2.05643700520543;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.7047051061673150762;0.67515349532834889601;-6.7617861896953197487;-0.29363704856259098541;-1.7720686521773718614;2.2341505996047725802;4.2280059659288546925;0.39945372828439257296;-2.2024290582058632104;0.94542948910456636735];
IW1_1 = [-1.1432937136072445217 -2.0317793498944043407 -1.8141932221002019521 2.6423118037239321509 -0.39578388948819603899 0.98598625530150774132 -0.24189885656103929379 -2.5476088538472145828;-0.094140646967844229809 -0.63167033852710519071 -2.2236448624009814701 0.72270140869251753291 1.1552776523196610636 0.32142268284032471382 -1.652929421128282339 0.28481484671580853396;2.7191041657671837228 2.5165405526126254365 5.9322402679394130587 -0.019418716276471952031 -6.7868138431069802152 -2.3587715614585285095 2.2371350736018276173 -3.9072883657272403646;0.043001240052713732287 0.28145029805603555273 1.9808723571979864886 -2.3261088665545992527 -0.27042013121873981207 -1.0221639831035196355 3.2515561941184971673 0.29382415978634907061;1.6492739710632804417 -0.33912280883534845488 1.6388580980831901623 1.1044605494771690957 -1.8297500417257799299 -0.01216279228608929501 0.45707645121754492124 -1.136457192632789992;0.15143130203231600084 1.205535629952727561 -0.85006631805449484052 -1.3407835591152597043 1.9869049510324872099 0.23142537003256899442 -1.0798863220442453947 1.4992463139466651878;3.8999160554570493353 2.8881039184937868924 -4.2880773948350920932 2.2703061668275075213 -0.52370838839797206887 5.1213055027992373525 -5.0334836835933076671 4.1558676066329178767;-0.12613345580820939373 -0.12386042328630536558 0.026707283591176758653 0.55381617614080758116 -0.94894628643247358468 0.39681291797249335085 1.1577912160050836121 -0.0080447359456733095323;0.81189428018769327355 1.863000586172794959 0.79844904313764242243 -1.9498521687049465978 0.16941494689360420134 -0.68602144851218160859 0.18745094642509058103 2.1560897421480853531;0.70871922149335375707 -0.57375962309524952687 -0.31224419205243220121 0.68675175722240611176 -1.4727975727212290202 0.22000069427939097921 1.7632525550414124282 0.022719660960602138661];

% Layer 2
b2 = [0.053951337992512393704;0.56050181339256510693;0.4517909141852129995];
LW2_1 = [-1.6257432425310218704 -1.6794618373360852281 -0.64945814765492604348 -0.71519947951029916311 -1.3220537050084066877 -1.8781181591327433811 -0.061010622056964974869 -1.8683381861837531357 -1.6558114042534346488 1.3339573012347709646;1.7293266576849120053 -0.61219731490996998069 -0.60616324330488846606 0.078206964128388775648 -0.5682625084345036548 -1.4505744626785410656 0.098775211577628696524 -1.9669121181997422099 1.9836518052214082708 1.0539861060792115044;2.3130106565348973469 0.44954258075214614809 -0.38588795430865663327 0.46695447323445110621 0.48060223125885814799 0.02176806286243269592 -0.13702544453690079784 -0.72206100336010647922 2.7492050395809481955 0.38588252841002929072];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
