function [Y,Xf,Af] = nnet_2019_10_08_11_12(X,~,~)
%NNET_2019_10_08_11_12 neural network simulation function.
%
% Auto-generated by MATLAB, 08-Oct-2019 11:12:33.
% 
% [Y] = nnet_2019_10_08_11_12(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.66904481973302;-1.56373294439454;-1.22860504768207;-1.3061463782146;-0.949512550212366];
x1_step1.gain = [0.517241332274923;0.678253416733415;0.886882266693122;0.765131413845666;1.0601203069455];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.9452865686964910807;-4.011169659464293602;0.37893436846633066217;2.6356983496383734611;0.39239468152198192508;1.182718780431940564;0.52759657999027065323;-0.70728222244886485015;2.2749679507340316853;385.16750469610650498];
IW1_1 = [4.6750313816542377054 3.3011598734189773197 0.53441096063269177829 -1.5310148603084630103 -0.17968029664806176027;4.0415306866716784739 0.44471769430937724277 0.2056405019475203988 1.5928374337576156616 7.6104795328208920679;0.98953356494100130902 1.1830295474571637104 0.089817619604863549454 -1.38274571943397806 -2.2479951573977801083;-4.5807329843612913933 0.76883382928611576634 -1.5904030187473026103 2.0009616238581311443 0.053438328968343801195;1.2462516645028818285 0.92354530616907792862 0.084041554756187880626 -1.3735924900657883185 -2.9044642676974032902;0.782834561441696275 -13.746994222547076703 -9.1872121643103987765 9.7000020531914810107 2.3356374300891604712;2.5514326023634179563 -6.0382748945461743872 -0.43605756803797707244 -4.7654695145178660454 -2.9299420226722396876;-2.6761748263012479221 7.3132322746727123075 2.0261545615068112802 1.6638248748111335029 1.4420012469880245654;1.8373401289345787646 0.81012868722601516502 3.1605590455683847395 1.4181346553759517359 1.0426776836937450277;288.02382886563174225 -266.35244838342538287 4.0834089166713658514 776.24866770084736345 -202.56739481458492946];

% Layer 2
b2 = [0.29583991781848101299;0.39749672686614123673;0.24627005739058419054];
LW2_1 = [0.39947100185075734569 0.10251927392635322434 1.9538726763526388375 0.17823656129724246844 -1.4660644540228155996 -0.048858047635008561294 -0.36514798927311870047 -0.33427535452730372523 -0.36373083187423971285 0.18233310592903245739;0.45526751938884602033 -0.13076033786710358764 0.59919415374149676001 0.24647791908286928453 -0.35195765499433223633 -0.21308080611392968273 -0.53760512079139288755 -0.68559723305763908829 -0.25718952625928859224 -0.16989875666349266159;0.28198617874505410574 0.076915946028319082117 0.19848267528609167543 0.28161514047607955069 -0.021653717221712290297 -0.13059695084825959088 -0.32845930330648737128 -0.42141436334238108197 -0.10845837987734693875 -0.11116677180668578517];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
