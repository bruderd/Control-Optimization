function [Y,Xf,Af] = nnet_2019_10_07_12_09(X,~,~)
%NNET_2019_10_07_12_09 neural network simulation function.
%
% Auto-generated by MATLAB, 07-Oct-2019 12:09:13.
% 
% [Y] = nnet_2019_10_07_12_09(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.05111801315361;-1.7010918120169;-1.80664336465845;-1.00270835594175;-0.909176647337217;-1.19330074844008;-0.836423881611371;-0.518196930377155];
x1_step1.gain = [0.449468687117217;0.632593541923473;0.588292154125161;0.971534469958783;0.921435957700417;0.926357191497144;1.09359428266534;2.09835571302752];
x1_step1.ymin = -1;

% Layer 1
b1 = [-9.7080766143561838533;0.63126957445994191787;-0.62159093220864536367;-3.9786358195772764113;4.1400149618960080389;4.8646252676949224281;3.823258105766555115;3.2597341938926684968;4.6631317539696262031;-3.7706717810347916142];
IW1_1 = [20.143064793240235133 44.446285151559258964 7.2234977284916759288 21.284130493208269996 -28.749206332174935596 34.195759346551220403 6.1128339773103155252 -12.411048991275114517;15.917815333785849674 41.229010767821741013 -18.331982630237774856 -13.827046242058159464 5.5104955457266395769 -3.6494232861722348815 0.79921135256081954346 7.1470144199144138852;-40.209370476210203549 -66.10786101491851241 37.057893207784360357 39.087036665316574613 -24.617430828197164772 0.42205924019270679715 -0.015236811591778365305 -18.021216990399732794;-6.3916733645477270542 10.70075577630183794 21.591751236627612087 -3.3770774411597224152 -13.495379309780135557 -4.7554108832301906773 1.564841300184512507 2.0139725694613379581;22.619654622768585739 40.769239161083696388 61.949663079425803858 10.323798351077721591 45.502738230789873342 -28.858726112907280736 -27.993780321877370199 -15.533886758662864835;15.916655141932389839 10.698982401425759292 9.9778025919143988887 4.4870805574178920239 30.333559794816217448 3.4924241191069702595 12.071481103754562625 -5.894958963205232827;5.228272725773873475 -9.2815219756480384916 -19.240771907408309005 2.8581348631726113396 11.353973682268959422 4.1693673991770401344 -0.64087323925502237554 -1.3819420541184441742;-13.58845636719367711 24.640178915804003879 27.062800882885650111 1.278572830107099545 27.745301698319273953 4.9772238533648405223 15.302334049648990799 -8.1088974408232719071;17.347898756982285562 12.654735734393238289 8.6410592416921474523 4.77939331579023996 26.944988132713056928 -1.8581696682181505498 7.3986585618447442414 -6.4106899299455157859;-7.3287471248720539307 -11.378634058954837371 15.91328573616184805 -1.8066778517537236404 4.09024940972393658 2.4760577266394028229 -12.860499285748433707 -4.7512849035093642769];

% Layer 2
b2 = [-0.084236630512277907434;0.0046454694290360898021;0.038565891723922662848];
LW2_1 = [-0.1429285949283628232 0.29488187937333038002 0.22246799681895607081 -1.160403653405943647 0.16478395684325355952 0.64868196112072318282 -1.2227990939252300073 -0.1341209452783229672 -0.69208744052204140829 -0.23003376713783507679;-0.072700020796748185403 0.15614147384248927564 0.12626454556439919985 -0.50873555250511526271 0.034463052036038333004 0.43358713144081328927 -0.52974336089004736561 -0.078070341107856128238 -0.40849643272006830319 -0.02622870561461717806;0.0049999174144490163285 0.066505825436885809832 0.0070876794234431212197 -0.10586647217450365077 -0.0015493576543911789529 0.10531450793177193903 -0.093962535519831247299 -0.045371627372692700797 -0.122351447676679978 0.033127688399005754405];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
