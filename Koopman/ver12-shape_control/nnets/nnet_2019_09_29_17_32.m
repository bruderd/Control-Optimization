function [Y,Xf,Af] = nnet_2019_09_29_17_32(X,~,~)
%NNET_2019_09_29_17_32 neural network simulation function.
%
% Auto-generated by MATLAB, 29-Sep-2019 17:32:07.
% 
% [Y] = nnet_2019_09_29_17_32(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.48440784053919;-2.26181019100452;-2.3261805538093];
x1_step1.gain = [0.388436294606235;0.453290103513187;0.462898622824384];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.4237336407301617314;-1.6159048295724340871;-0.79412942552059673229;0.58002861582285925035;-0.059338409437085092024;-0.0052003872888794003271;0.12755019755469251819;0.74355838667948426224;2.4353591117478829986;-2.445114741652739454];
IW1_1 = [1.6564006304655050084 2.0123522405394429491 1.1480069824886931507;0.18160532693200098775 0.16495919270666739576 -1.0354590006504120758;1.6809923199287866158 -0.29364798687033683011 1.0692903717809350006;-0.48668616753494442495 0.044552760261681201293 -0.57189691082406268752;-0.20912868651994739877 0.38912843051998902144 0.22382591841100046848;-0.24416480284353356267 -0.40567998598248550257 0.20781015870086613773;0.25744845370285945885 0.14940100864624111798 -0.70242541158416194058;1.4394543423789305514 -0.18682518848540807799 1.007095987546742899;2.3129883162903546179 0.21851014388285916468 -0.98769085098318520899;-1.2502112546089263478 -0.24924428054542491218 0.73661797079319435433];

% Layer 2
b2 = [-0.8700684391548043628;-0.098964387466958778083;-0.069619616922208929499];
LW2_1 = [-0.54373674880825439981 -0.074712218939071525781 -0.096254366504296764995 -0.46070539241532187935 0.0093706408528203243014 -2.888547908753952953 0.078410655167941684107 -0.02265690388889653531 -0.15904699139727404567 -0.62973533084279587069;-0.50668142405228477898 -0.39145198004440417971 0.29551897438909974225 -0.92514895463979762713 -0.49949751793473895489 -0.60018668049481849192 -0.43544251250819099308 0.5301248202345527627 0.034254287994890844637 0.47697944233476557985;0.50119748489705584493 0.38821295637486125107 0.1460566226567346082 0.14517080355155800864 -2.3953904681588658043 0.16427040779495552525 0.70281538363346851561 0.16838979060553421752 -0.18145465401388446991 -0.93355380583851477194];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
