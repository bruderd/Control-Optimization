function [Y,Xf,Af] = nnet_2019_09_30_10_20(X,~,~)
%NNET_2019_09_30_10_20 neural network simulation function.
%
% Auto-generated by MATLAB, 30-Sep-2019 10:20:09.
% 
% [Y] = nnet_2019_09_30_10_20(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.48440784053919;-2.26181019100452;-2.3261805538093];
x1_step1.gain = [0.388436294606235;0.453290103513187;0.462898622824384];
x1_step1.ymin = -1;

% Layer 1
b1 = [-4.2140435581602000426;-1.9946335996237150034;0.7912804469908832905;0.94169815404441570283;-0.073881370954476138779;0.51591241605184900987;-0.67800121496911891494;1.3523190960516264791;1.7503885379653181253;0.41778955264374656453];
IW1_1 = [3.0259412916579888631 -2.6880734132943562287 -1.9098248592046149774;1.8573318868537957993 0.32528779374391753043 -2.1913298630306865533;-1.3168411663079373497 0.15151958912015711656 -1.0154115778364558587;-0.94193417031147552709 1.2166292268801783827 1.3488912528977552441;0.3923980682598453007 0.40587020361721526385 -0.13567224027247842821;0.42269500249188962648 -0.68559606326841904256 -0.77325151517743806462;-1.2671030802490668155 0.075931005257963410382 -1.0679210678333659335;2.1431461693713762529 -2.4576211807692218692 -0.13464199585417668814;-0.41408729009805644861 1.9010788566938445765 -1.8652026164832786748;0.17660685547278456853 0.47432468969908164746 -0.25755764955379123471];

% Layer 2
b2 = [-0.11969803768283836243;-0.40602916626893598151;-0.69709937898985896432];
LW2_1 = [-0.0051066464583510041281 -0.020578748076456564176 0.10316018859988160261 0.0019154413777768772038 2.0866659667246123533 -0.04150355941245967295 0.084442800357089398133 0.0038672423758126395904 -0.055667075599090461158 0.84991032919132647461;-0.49676677876820202195 -0.0092206169561256760836 -0.76485522419527696147 -0.032936996833764310699 -0.020387212423318080284 -0.062708299664874983526 -0.76105359516422799171 0.029417011293571323355 0.0013236398422955698156 -0.13094466123647302558;-0.58603825312701829375 -0.057838389805312695469 -0.11216786777414249066 -0.48954397768955870696 0.28697501257119473195 1.2442298366865007786 -0.10119066208259232253 0.031900579387716468394 -0.013661808131976448111 -0.076286661354303744731];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
