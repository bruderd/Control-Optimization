function [Y,Xf,Af] = nnet_2019_09_26_19_05(X,~,~)
%NNET_2019_09_26_19_05 neural network simulation function.
%
% Auto-generated by MATLAB, 26-Sep-2019 19:05:57.
% 
% [Y] = nnet_2019_09_26_19_05(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.21303270592303;-1.22667609163178;-1.17851594928264;-1.28075944605278;-1.01028743961499;-0.558308375352395;-0.692921267220199;-0.536958379713264];
x1_step1.gain = [0.810311019256358;0.820551293913489;0.936098596551709;0.922335636577094;1.06375456741261;1.12971874991914;1.39097890531901;1.98577748859204];
x1_step1.ymin = -1;

% Layer 1
b1 = [1.5349110527469986831;5.3637225836073580965;22.496702516161366958;-5.1701904964067741943;0.60405515838757795066;-0.26943676810138383892;5.7002410778827350413;1.7949615170627639671;3.2771299605752028938;4.2609449526005738207];
IW1_1 = [7.6688924442281676264 -5.6387186791164829458 12.437799533603200786 -8.7011727753930063756 9.5489287655679202516 11.95021781333269395 -4.7519084191396592232 5.2185192707156717873;-7.2598043377658081354 30.938941601260822267 -10.483854407686559185 0.18374454464885933702 -6.9730976375071662687 8.8143807651548584658 7.46413836036636269 -2.155126256542155172;14.440664721539013371 -3.9587196402144386731 -60.009995787034320358 -57.569064370161044053 -45.842778402921744885 6.1988614211136239263 -10.899623944983087398 -10.920937851000037;4.5616617643160868312 -3.1648440561718738095 -4.9052684240654702563 12.601201772091082276 6.9069921702016232601 -1.9921908683579210297 -6.7379515264694527232 -7.5830649170761237343;-6.5451590260310466007 1.3678354949190436596 -8.0694491819610227878 -8.9242855560520730762 -12.229693511209481116 -1.3216542378660609547 -3.5005438810960334273 -2.7684442642229720732;-3.5400397115698427619 0.80819980453448814206 -1.1524820885304420948 1.4898590099423505428 -3.5656800203767420321 -1.1428985893920318162 -0.57905191895196772567 0.30869924751282196151;1.8460031955112705671 35.184762141447116335 -5.6650576852323535348 -2.3805627438000085405 1.5325107100225023871 11.923859282286992212 11.628748180019190528 -1.4778688264520467577;-1.8886305833604564164 -0.44264026995703897871 -1.9655066267661054358 0.45932379322252897547 0.31018791426895170327 2.5070889259136195371 -2.717838895044638825 -6.3287753477231474264;-0.29567852635658564697 -2.6706722509516893638 3.231820061875947836 -4.2498114162562412588 5.4224462192969902219 3.4728002789588248156 1.836378676025895329 -3.5121178368116892088;-4.0264990657742316671 6.9052595024211855801 5.756280120480682605 3.2432719784438401867 2.2677286095104762786 5.8435093593136162582 -7.5423823707179149523 -9.3638760233474727102];

% Layer 2
b2 = [0.11786039712746332331;-0.26810566514258515891;-0.027573796559150459684];
LW2_1 = [-0.039251254574921526364 0.027803789356899203528 0.023235595514130732292 0.058488408138901534783 -0.11592192858835241587 -0.71412125365872269889 -0.076624455113447537125 -0.31120393243920652093 -0.18322709822805618995 0.17196720492957559556;-0.14561091681779467222 0.4039576729653066578 0.066331447139792096279 0.35964065183357468714 0.17121653562035196727 -0.26018407938636728405 -0.50732805979004447217 -0.77917878922604977276 0.46169914129444639128 0.46168749633782457664;0.19159556872718386256 -0.026536228387399315998 0.29189800972600665752 0.095180613108980807735 -0.16467303961665757939 0.34667256037782590017 0.1815766004126399269 -0.045671155176235732343 0.10258092040086727592 0.034447935103341362217];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
