function [Y,Xf,Af] = nnet_2019_10_10_15_03(X,~,~)
%NNET_2019_10_10_15_03 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 15:03:10.
% 
% [Y] = nnet_2019_10_10_15_03(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 4xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.15306536650079;-0.836479659634494;-0.87995216847934;-0.663480256590221];
x1_step1.gain = [0.823838303416335;1.03998860154958;1.15597095928608;1.53112443794366];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.8879602199544194274;3.4602428393029849296;-1.2041720482513789126;2.8691343769218224935;1.03055399730553221;-3.3917958975463813331;-1.2675809047931341222;3.9026895700808901246;-3.7340447613402893978;0.2390706736338668037];
IW1_1 = [6.6158819085595377274 -4.8750982041574797421 3.7730756751693190765 10.494715537299747155;2.162258803197256718 14.664710877786045984 17.655767035309562374 6.7418695047177905622;-1.8885064108594884491 -16.165918980727173704 16.684846012890655942 -0.68921510772059013661;-8.244496073090916255 25.733162478910710291 6.8714009470587074091 -4.7494387309371326467;21.449252914297826322 9.8977254638503087136 8.8343575156742932819 8.9480605268278541331;15.366728229940221695 -23.806670091284590995 1.8871428796158626895 -6.8748546722203487391;-19.033174424280442594 -9.7233981853099589188 -5.1262549173091720434 -5.4733970058981187279;16.555638421044513109 15.088277464891490354 -7.9553074623672861421 -4.9676476325995944094;15.503777223622414283 -24.038171715690605623 10.584056321380705512 -11.531337702884968621;0.16107318562894024083 -0.67829308805414556538 -0.4385936662916012363 0.58117941886007673524];

% Layer 2
b2 = [0.40504616494634582136;0.28852002490459582873;0.19891789962009459591];
LW2_1 = [0.18695428552141707401 -0.23204328578699587315 0.33124812312111406865 0.35858225204102905925 0.78833667530550899372 0.74775050760404293548 0.88947331228255666069 0.27097601089360662252 -0.70336770512268209643 -1.3439651507614627235;0.078557770360752871008 -0.083433464970392112736 0.11194301255623334557 0.12816546937611217327 0.51693092921829308928 0.51152284931943348134 0.56729839632260392612 0.11507825051634118507 -0.4530623399692948472 -0.94340869210385469579;0.10046647946927680928 -0.033876104281427434073 -0.012283118615655915992 -0.022534544749129890168 0.20271741775230534 0.094939718587220542356 0.26639813614653296003 0.065683907971877342202 -0.10118528652432755288 -0.50661719365741320065];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
