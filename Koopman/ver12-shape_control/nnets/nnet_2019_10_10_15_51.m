function [Y,Xf,Af] = nnet_2019_10_10_15_51(X,~,~)
%NNET_2019_10_10_15_51 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 15:51:06.
% 
% [Y] = nnet_2019_10_10_15_51(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 7xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.870529476424574;-0.653758942446831;-0.723837594880846;-1.55242771955881;-0.968176111583366;-1;-1];
x1_step1.gain = [0.721388909521628;0.873096891808657;0.983150215685652;0.934521236937008;1.39227634850687;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.6222379230003767248;2.2257796239778593339;0.94676025337790181702;1.3039681040364496933;0.45517426909413644109;0.74874574824191264533;4.3995509720168239909;-1.1367599598980333564;-5.2243099613483883203;-3.5053068580987574165];
IW1_1 = [0.65756570065247477164 -3.1173780649394275954 -0.5451964978198458045 1.0173244473986495784 -0.53968670105103999646 2.3493745217097732336 -1.2122189609156615031;2.7701841514209335493 -1.2800233946072849811 -0.93077864833648993326 -2.1866456987460751726 -0.91603491253776114789 -1.2615387549689014435 1.2989433131300309743;-1.3779309510735948674 1.5013871144856794082 -0.55740783817250771914 -0.49737653303454720799 -0.58403528139802218799 -0.33696334176509218361 -0.29810319967756032655;-0.30812212767570212879 1.838392707198350573 -1.1468746006090240197 -2.2207098967946983237 0.62551271073394998368 -0.47323068144722196804 -1.6706459519427256932;2.4977210370683540219 -1.2370591689268655156 -0.78903764820796740143 -2.4247966763617694319 0.99759098899959974815 -0.17996656144006126232 -1.4570948176172640043;4.6355877056235321731 -6.5138357145733314368 8.1287506146315173794 -0.2469868283998686298 1.1186870776656478998 -1.9785473011893492945 -0.13218963664619329257;0.91838722255310556442 3.2158152099182593098 1.9290521168054088896 0.17677337085752647949 -1.3513582497003855387 -2.2627492348613209572 1.8705674926277278125;-1.4081185623954945996 4.3358722513899303763 0.5497406229037407055 -0.10205394491225858178 -1.3998346540475912203 -3.9456572006445767009 -0.91163885300610125739;-0.85547366716310990764 -4.234113033452172381 -3.1084160980566557519 0.047866418155013218394 0.34488334565436568058 2.6575698795199924618 -1.703487827885864947;-3.7298480782108400788 0.7760414805129951521 -0.84446131723952899684 -1.0243442425256201744 3.5578490072828063973 2.2220765688386618919 -3.2893621029811606071];

% Layer 2
b2 = [-0.10602179848010601093;-0.14670127828414861182;-0.11247254172233001057];
LW2_1 = [1.1266444835709397143 0.46023161079877050739 0.66054483705655064885 -0.21134548723788015856 0.25867822164055848111 -0.3060894660387268873 -4.5673750898503389095 -0.21276009225350181464 -4.3756354410682209988 -0.65674921293533894406;0.36501714222184233893 -0.18834401809055228982 1.6580434394582186375 -1.0633632774243682029 1.0139058044709901019 -0.15983614135033685777 -3.7313520978730116973 0.087845405419679778447 -3.0108810473700380328 -1.1022870933988373476;-0.10499945885682185343 -0.17883118553376012305 0.77192083385112364446 -0.58023604429534736404 0.4606095127313544757 -0.043617906335707445908 -1.9687868036419975404 0.11778911866506840134 -1.8197221827618432766 -0.19180503035095425313];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
