function [Y,Xf,Af] = nnet_2019_10_10_15_02(X,~,~)
%NNET_2019_10_10_15_02 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 15:02:53.
% 
% [Y] = nnet_2019_10_10_15_02(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 6xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.15306536650079;-0.836479659634494;-0.87995216847934;-0.663480256590221;-1;-1];
x1_step1.gain = [0.823838303416335;1.03998860154958;1.15597095928608;1.53112443794366;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.3951658945505465148;3.0541716961097837846;1.7963615825430034878;-2.8995058942245526268;1.2887280677201644608;0.2968221685295838741;-0.75673507494347436175;-3.3774128839531871726;0.46542831400297263178;-3.2484249308443553517];
IW1_1 = [1.3068295657548230082 4.3189218905578474761 -1.0219718308110474769 -0.11494667753577628155 -3.7182240170620040054 0.74277632597411435977;-1.7355977111489242493 -1.2161699312941531836 -1.9961383758508306485 -1.8631609193984837169 4.1702992630965374232 -0.28754597796878611504;-0.74818049635028827105 0.12551998260531127549 0.7428057443142513927 3.5589096329706064736 0.31257578977626337968 -4.4354651952424228867;2.8516528036704924531 0.18038060168000058514 0.5488610365862189866 1.2342355171082384224 -3.5324068942506130497 0.81960698696173128752;-1.4452225101914306649 -1.5849662634384289461 -0.029349679230139744113 -0.91468843069083560771 0.67871682371707009462 2.4657616868504925733;1.5830051107983389436 1.9092997256831509834 -7.1236589272703429998 5.5539379452322794606 9.2961338546561975704 -9.9433842282612143748;0.14841652284815243235 -0.011790907068660219648 0.11943777492057332246 -1.1024776063500334455 -0.064912577013555419758 2.0367537669693094315;-2.7275795934762712136 -1.545456872929318326 -3.0470738421669070206 5.6194232091840294885 0.18672014120423868766 4.4033107442297474421;0.025204887177684837801 0.30110792559375304522 -0.015860247679845833335 0.25932321517425926949 0.22449893636237944206 -1.1922061118824258674;-0.8989344561872020245 -3.7617988549299878898 1.2089233941894730329 -0.21444788914725784745 3.5245113281543765105 -0.42665145723245795351];

% Layer 2
b2 = [-0.54618317189120668687;-0.48260154610746608395;-0.22545943701514159496];
LW2_1 = [-1.2883442086957448414 0.51824404029296977647 0.57046354311690916639 0.60365618767563589131 0.81917886972320252958 -0.15986210338966636013 2.7383075936618861412 0.20280518477890954743 3.5588669106859782687 -1.1957672430071362157;-1.7811786098807820267 -0.74454644101126976619 0.1276425892946075058 -0.63144556377819505144 0.3991577921829293496 0.15595826574626930894 1.2363415102574839555 -0.13212062668787261099 1.1453267455868789693 -2.0199980605341827378;-0.77093418046185446801 -0.38927056285735617269 -0.34778985859356759125 -0.38925465538399806054 0.17154870707295799548 0.094076894490388307535 -0.20665004107694126545 -0.027830090132312676476 0.19419156223513778237 -0.88466770890747703504];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
