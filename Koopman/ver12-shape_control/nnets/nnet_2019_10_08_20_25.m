function [Y,Xf,Af] = nnet_2019_10_08_20_25(X,~,~)
%NNET_2019_10_08_20_25 neural network simulation function.
%
% Auto-generated by MATLAB, 08-Oct-2019 20:25:09.
% 
% [Y] = nnet_2019_10_08_20_25(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.604938252531745;-0.553550430141131;-0.496540544318389];
x1_step1.gain = [1.69608747308123;1.86472651642756;1.99124055734825];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.4207258487598224406;2.4607895109178312687;0.0027229253933558875307;1.8516964500380277414;0.14603464044273464784;0.012946719427084783099;-0.027726061377871001612;-2.4005576015580532001;-2.8941538133823532242;-3.1673981481083943734];
IW1_1 = [1.726007814874465085 2.7399831479994576355 3.5378710958866763647;-1.6971661103461541664 -2.5901050110551979699 -3.3267467300600372937;0.1463867750612560803 0.04041020235967099361 -0.27025412361542006101;-0.55457962587230291707 0.47316150167219561684 -1.0862879157138667363;-0.13057455404543619193 -0.24071804710152450157 -0.26108011472079473148;0.054742106897560691148 -0.62950093679795726676 -3.8379010823742909508;-0.41133957775905816145 0.32165940515159235913 -0.70673901338850630971;-0.90622518522195605328 0.69023494212609404208 -1.2561129097784842212;-2.1885314589066928725 2.2364497305391752846 2.5702876069756959154;-1.9597232448319832354 1.9315533508509843408 2.1441799240209613586];

% Layer 2
b2 = [-0.69856376745559234376;-0.30179158418557899823;0.39563755031406494522];
LW2_1 = [-0.08456692489659557721 -0.075275328876103955733 0.58457849438903775052 0.48887015209390549675 0.39436265615479115798 -0.15385037901310880115 -2.0963817391186347905 0.97513660610810370954 0.66253201767987968118 -1.7549570716308215967;-0.11507632081029854632 -0.09462267915110847416 -4.3909614396054355012 0.74102280253311114677 -2.0448245907896560603 -0.14980166635918176765 1.1303099239144791532 0.96523924906623281839 0.49394118063566921917 -1.3783058007327024796;-0.12662639333898711991 -0.092402067521156122654 3.5834152952514415347 -0.030025854323188220368 -3.9957217821444035444 -0.011701121753201414524 -0.010189067736983990764 -0.0051679653656904146405 0.061659590652495245566 -0.16545121153394137803];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
