function [Y,Xf,Af] = nnet_2019_09_26_19_19(X,~,~)
%NNET_2019_09_26_19_19 neural network simulation function.
%
% Auto-generated by MATLAB, 26-Sep-2019 19:19:04.
% 
% [Y] = nnet_2019_09_26_19_19(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.57324662081003;-1.43256039371853;-1.38738937624902];
x1_step1.gain = [0.622348520607479;0.690400580490197;0.743411476872467];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.177854692899861444;-2.8610673564188862095;1.4621169299148277787;0.041607084275326861045;0.046251647263182912861;-0.39622270600326758849;-0.15730153539424329701;1.9180506981904676955;1.611742300243395265;-1.3836095656272890952];
IW1_1 = [-0.42149630040483643256 3.8224837049834019531 -0.0097359838078999189764;2.3574795807635036127 0.76543601458592569475 -0.47078204921334904087;-3.7206994283697363279 0.55580376039376289121 3.198881376822785505;-0.083345485208411201894 0.012705513888250129576 -0.22870768590175369339;0.17270488766405331371 -0.36814216080430905986 -0.073324680840425815465;0.40155949069529006668 0.35620221097737292393 0.081345047524191360644;-1.9262111384353457488 -1.503136413553673334 0.051148755954251355627;1.5722435572031208117 1.3289729836565817855 1.6004262302549265851;1.5281610004814729642 1.308045116679873443 0.58682106346991924628;0.12318078733664308833 0.48656119145696857808 0.036917524227969573947];

% Layer 2
b2 = [-0.54788401244281736968;0.34048007976117727891;0.11127988743887468059];
LW2_1 = [-0.040410229826739044179 -0.039026680877618291632 -0.0056892606506846283773 1.2083690190048546054 2.9863018740345812496 1.8444812472677163395 -0.039190616017243357083 -0.048594479049541131066 0.23149253290246116221 -1.0360223377185775462;-0.0030954753540845757719 0.099703184396319755045 0.015455906311883800194 1.7430287084088968985 -1.0609353549840916386 2.174179014370535068 -0.069652521747033041555 -0.091787973763321387133 0.33860882464841246531 -0.38799406723671447939;-0.00060925583018418122665 0.031709037641508251715 0.0023829516812903174701 -5.3403411289052566957 0.014351762222257872376 0.022717658945177500451 -0.026663637524825617442 0.023239621352565263679 -0.018776272835824611013 -0.12634792509451311937];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
