function [Y,Xf,Af] = nnet_2019_10_10_14_52(X,~,~)
%NNET_2019_10_10_14_52 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 14:52:35.
% 
% [Y] = nnet_2019_10_10_14_52(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.57727744017018;-0.987805776291691;-1.1215612827827;-0.752810532489044;-0.47080079441883;-0.513129285106241;-1;-1];
x1_step1.gain = [0.611039855072676;0.929486169836227;0.926914811116244;1.35127122552213;1.82534178024856;1.97195302928362;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.5018069782558538527;0.57212352617103334751;0.56574876036377963473;-0.60621983761603659424;-0.33172994609368089414;1.2605803366287366973;0.05273043468729826655;3.1149038176256613752;-1.4737308827711173009;2.3077538137527784379];
IW1_1 = [0.36346394344638888185 0.963724655900320748 0.68608558404807495901 -0.30742725942035575848 1.0866099068676082773 0.59579759716800073654 -0.42394632450502650611 -1.1962358903207390703;-1.6259696332276307729 0.93104240036894836408 -2.242031133209194671 -0.23516220557622441456 -2.2412471972911514051 0.26646145472452276159 -0.94681057854707018073 -0.73818130539292348136;1.8146119605731996227 0.41236032998471949806 0.7473460764167481063 -3.9300005610901598274 2.056494610168901449 0.4919124286285285752 -0.77904966027412658747 5.1359727342238477021;-0.60537139866612532657 1.2306540308917943705 -0.91565495103330318827 -2.0867664970328365648 -1.882664144013478813 1.2532580085632212263 0.64049540970074614332 0.36792842417590970738;1.481571569017765988 -0.7456331160222184895 1.7710785161987256942 0.73497144975738193384 2.2341224493958122821 -0.54945467672306835816 0.69893772838476975195 0.38573408329228714431;-0.6864414877380000668 1.0406718903157849976 0.90103319312149499076 1.1745914713221359271 -0.25596092949730103738 -0.43627363065870811143 -0.22054981263064082908 1.2745957585563127967;-1.0999630507114368516 1.3485973102708548321 0.16443749040676647333 1.5565469581854807224 -0.76291544518751308601 -0.131980052842158746 0.046219376232998626852 -2.7003070520250345155;-0.36747672550890964072 -0.78922266552813891138 -1.3403958348781248588 -2.6480298186593169696 -2.0406705793684269956 -0.5612460275675685839 4.1660880889374061198 0.9506491159233138033;0.44189762735259319193 -0.78953645900952296177 -0.89560025844729729272 -0.534858669501910855 -0.077015914533961407629 0.11289689000958663678 0.82778436991748771678 -1.0146138500998067578;-0.33347375937559931014 1.9051985232561692296 0.62944835610867377884 1.0536999437999872153 -0.050503368823599181781 -0.242972687100607182 -2.5344849911917863849 1.5082691345475962574];

% Layer 2
b2 = [-3.4297667467069361535;-0.87848046265418933132;-0.17719647459619597418];
LW2_1 = [-3.5850667686168105064 2.1290709646831382784 0.21683994221284991211 1.0133294327479558383 2.9696338050835247024 -3.8384941903617821879 0.42953759076381925475 0.0033087379074771975165 -5.6799353917823278692 -1.2087434595637385204;-1.5970752994259738156 2.0934091502519871497 -0.21110529084405224576 0.68874080379477553571 2.5771731147367646919 -1.3412517578643201599 -0.2796077496090159098 -0.39032233091334250785 -1.2367414419976061613 0.092755640621135254653;-0.30289352283662551724 0.9278490731145391246 -0.43608564251605763662 0.25159616773699594594 1.0379845070008921759 -0.31979349371745358077 -0.47859567076471243308 -0.14271178019677024928 -0.41043345527867497458 0.048782727815413470807];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
