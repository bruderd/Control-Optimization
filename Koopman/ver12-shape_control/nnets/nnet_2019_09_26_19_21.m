function [Y,Xf,Af] = nnet_2019_09_26_19_21(X,~,~)
%NNET_2019_09_26_19_21 neural network simulation function.
%
% Auto-generated by MATLAB, 26-Sep-2019 19:21:31.
% 
% [Y] = nnet_2019_09_26_19_21(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.57327791626395;-1.43268029664809;-1.38738523619758];
x1_step1.gain = [0.622332510827639;0.690342620443814;0.743413104360809];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.8360952266688328471;2.7237431700653789157;1.4718382329858268331;-0.7608412418332635152;-0.039154198807891733847;0.039555541900693512447;0.56681815265818524807;0.61920372947809543263;2.0747612122148408886;-3.5321060454427750663];
IW1_1 = [2.0855226833445263956 -1.4959010483999723995 -1.599168311005495724;-2.2098314868195791938 -2.0588908463890196465 0.84291548380732217449;-2.5027764295481387258 0.71017199248760443098 1.9194966820128789298;0.013678550610077114952 -0.17330194282265196093 0.81572145464213463573;0.39975797511992361422 -0.31501308691498391967 -0.1751608144586115634;0.42944877606862830177 0.43860031121325143699 -0.17579452039688436837;1.6615990648829819243 -0.78112076095921001428 -1.3801682989142918245;0.0072987870205013828662 -0.14656515418233762027 0.73249285084965032322;1.7322892374248872738 -0.88466389997650030086 -1.1199043876839684941;-1.7212719405818248664 -1.8048268772966422624 0.76452090509726411405];

% Layer 2
b2 = [0.18306743949384848835;-0.41909588125229235711;-0.21577173298350604824];
LW2_1 = [0.07722793569108594991 0.013947729039770321441 -0.058403390548932614112 0.1758328708941223617 2.0251613150481890813 0.4294163464636803762 0.078568514841269726512 0.20085048870538077526 0.14214511106985971978 0.15212844856008791994;0.020009869447836552137 -0.13335390027051097217 0.025341165581586607564 0.08961894959745776712 -0.78212966966027175353 2.1474247147144458481 -0.0085034746692080730862 0.061943150097064247905 -0.032002951433948566284 -0.52413969739789423308;0.023415961562844214705 -0.0094509334275689020621 -0.039318950140991466846 1.3083261454495276332 0.12212516381798159404 0.7582995530634402126 0.054386751906518808475 1.6015286843260931882 0.039920082107511890845 -0.12344099146443215931];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
