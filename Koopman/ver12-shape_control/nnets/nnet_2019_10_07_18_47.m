function [Y,Xf,Af] = nnet_2019_10_07_18_47(X,~,~)
%NNET_2019_10_07_18_47 neural network simulation function.
%
% Auto-generated by MATLAB, 07-Oct-2019 18:47:28.
% 
% [Y] = nnet_2019_10_07_18_47(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.51340622361997;-1.53976903304538;-0.960722794658146;-1.27576849053006;-0.573344751508362];
x1_step1.gain = [0.605845791525084;0.687916700597617;1.04897820455213;0.762329478522047;1.47940426503462];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.0999914716293295314;-1.5845058511343439456;-1.0719098910612410158;-1.2067001855444750014;-0.13289273909109750038;1.0790925390815993001;2.5288888684106765048;-1.5456884635587522236;1.9050269811992626146;2.5566952005400285231];
IW1_1 = [1.9470367804726373961 -0.17678113818334326157 -2.2844263106909381555 2.6693839123714679928 -2.4252747040923168242;-5.9248910577979332359 6.8484176855931666594 -4.5750420342564925846 6.9844617615732307314 1.4596060735918130469;-6.6240391533316005379 6.9354864416191608356 -4.3520533347590903972 6.0382084866115661725 1.310545036530856633;-5.829651035497963818 6.3697431079429609468 -4.1411229763715322605 6.0782368600084701882 1.2536762747727634437;-0.29164303789824291835 4.6261388263629514839 1.1613542625022172938 -5.0856903634561367866 1.425016380525070403;4.2052172001876710894 2.335955232136798454 -1.37595521981842972 2.0972950563911099131 0.7901533014655273135;2.8947654118235996989 2.6312709907278342136 1.4178943657171618753 0.22560288608717693482 1.1794023309837597946;-0.78056304988308389259 1.744261054519738563 1.1401023438383854902 -1.494906085606699131 0.80043298962878883795;0.84167679302465780999 -2.5870726285313478954 -1.4119582480030259397 1.5895077510880635252 -0.90808992852271963603;3.392446646621670503 2.3240497347042023968 1.5980794121948167508 1.9267246505637656284 -0.064854176614249817168];

% Layer 2
b2 = [-0.26466246476243510122;-0.40771324702721750688;-0.33984218501735097284];
LW2_1 = [0.32184684458865797652 -0.81023732645529755736 -0.92421325345531546436 1.8124133114599831895 0.33523882429055684717 -0.075239954807066175557 0.58903288681686793993 -3.114390597468090327 -2.3589090424745227104 -0.52138381264805089277;0.044645003961328318109 -3.4616764207228669648 -4.1959705199384700336 7.6298726202490758652 0.20533985110824806708 -0.24034617231700841633 0.65252366313959775379 -2.2534500014147385016 -1.7703805009063950937 -0.47576599713413386672;0.097992228731417330145 -2.779370366812598192 -3.5778922447461960488 6.2883500380294075072 0.14620017990056585755 -0.2716259506258313916 0.54176729806337475814 -1.6121533025341767686 -1.2785046588415838187 -0.22704425269757022576];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
