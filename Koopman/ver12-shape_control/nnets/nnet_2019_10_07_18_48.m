function [Y,Xf,Af] = nnet_2019_10_07_18_48(X,~,~)
%NNET_2019_10_07_18_48 neural network simulation function.
%
% Auto-generated by MATLAB, 07-Oct-2019 18:48:23.
% 
% [Y] = nnet_2019_10_07_18_48(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.73833416276708;-1.56380667870165;-0.944469505820526;-1.00584778085613;-1.03632372758977];
x1_step1.gain = [0.479959270518302;0.664160387514322;0.721027455898699;0.785730570983492;0.966023113472113];
x1_step1.ymin = -1;

% Layer 1
b1 = [0.14402987177121723272;1.1923009057569999847;-9.1010675386144654908;-0.67245447300429583848;-1.4712418610923378992;2.5891838589803946036;2.4064347115026896162;0.079885324446278660471;-2.3735270793317457816;-3.0104098179804914537];
IW1_1 = [-2.0060017372397638269 2.0557590700765953073 0.86722800118032372652 -1.2185922755659679417 -1.0847554285810860897;1.1588763240468327176 -1.7640711794957206759 1.0537822097906581753 1.4610398688714152371 0.73875900890757106865;-0.58469586782666482794 -11.630355026813317565 -3.5721534200418512128 -10.537315767990211413 1.9292794402801627385;-0.55001571044081853934 -1.0806838068978852352 -0.90676608293279536976 -2.7428728537877242744 -2.2620585194484896796;5.8172605309122102923 6.749969774093448116 -3.6548327334487722418 -4.3180277867463896513 -0.48405078188929590022;-6.8188881093638578079 -8.7527353011766368951 5.4976390293353203376 7.0002783504795704772 2.2069206207481744109;12.586239118535010206 -11.677990135730487609 -7.0131937824986749774 2.742519005073671412 -3.2943282499055928092;-2.160357017364212151 2.059657826618067844 1.009301799054315385 -1.0523425156055985497 -1.0618996512200546967;-12.77779446987121581 11.942555863869952049 7.4648176948348474724 -2.7682941537393666032 3.6105566922815173214;-0.82963122083484364122 2.5612911510919960101 -3.2247650008281945055 -1.6675108400101201767 -0.82719531392694833904];

% Layer 2
b2 = [-0.10221706851672837657;0.037384614020250284128;0.071530548064633062144];
LW2_1 = [1.7822130309723103192 -0.67967710674364933965 0.0052100862983860893318 -0.44697785119256422393 -0.5640459890004795307 -0.58566456495529395365 -0.62290408718369305596 -2.0280995755316930662 -0.54973485906131391854 -0.33788778213741366141;2.0890807233565378276 0.16636608310312137049 -0.13347891022694025054 -0.18289828095987681333 -0.71773376222117335477 -0.59043324003298924829 2.7507364154118949529 -2.1374525584484000973 2.861345879980131901 0.32950003789828125056;1.2881247230990049424 0.037089681505304533671 -0.14775129387855892582 -0.077303299092959146255 -0.33428746892856808781 -0.18739875485614784778 3.7032750030542533892 -1.3335808180803756517 3.6813493809424371328 0.34095629302904251201];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
