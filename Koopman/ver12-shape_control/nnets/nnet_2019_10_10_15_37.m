function [Y,Xf,Af] = nnet_2019_10_10_15_37(X,~,~)
%NNET_2019_10_10_15_37 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 15:37:18.
% 
% [Y] = nnet_2019_10_10_15_37(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 14xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.0064546195102;-1.59263789532822;-1.69376108840923;-1.01147936025086;-0.853946009236609;-1.00334807979479;-0.868539961989501;-0.475645079817848;-1;-1;-1;-1;-1;-1];
x1_step1.gain = [0.468367636688883;0.676037238922945;0.629616030050692;0.938320357949417;0.973323516934126;1.05496352029134;1.07463792061029;2.25990454785755;1;1;1;1;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [3.1077389224638807264;0.76573814366104264728;0.0079274066388581032605;-0.30301218936378981894;-0.037520148818498799681;-0.24688516628739448633;-0.021875029228928661446;-0.058988320223588151803;0.36399324709339347939;3.4428848505642739575];
IW1_1 = [1.1700036998086655871 -6.1768669499460377992 2.0240870952063638732 -3.3719629689673373818 1.516360011681790354 -0.2412387617996986644 3.471792061049435496 0.99165031925434121707 0.45471518501809476964 1.8671807091133290069 0.54225065872302147252 -3.1916965301050197468 0.79891684467349866061 0.95117071994152257997;-1.3683716700853523207 -12.831051146432296051 -4.5857391460248742021 -0.63844313701452504173 -1.0964163317703543576 15.577795354638414693 9.6072254757565911376 1.8768161611764004881 -1.0361808035881712176 -1.5666571806639146835 -1.6972670941642549192 6.986164280185958475 4.0874841560410342112 2.1106357781994167233;0.10014760227881856769 -0.11768476539513055001 -0.058754088951444120859 -0.11078740303437406567 -0.049957121275987198539 0.038658411370944112395 0.065405424597800951303 0.020016815294090762462 0.94389662656211614777 -0.060970932547178759153 -0.0017509466727462861656 0.42188698658500040084 0.025649010224242107386 0.057480238853625000017;0.019282301812552228581 0.086811504919517196166 -0.045185586390020446301 0.040784677136930694297 -0.11992742160637064053 -0.098128983884695694662 -0.096686301766750040732 0.077164194252789336526 -0.033234344269237721392 0.64002279539059747648 0.13816686621925761136 0.034942246509451838077 0.91459269087054506642 0.15799359441536683923;0.0060281219303829399608 0.03038172665771743039 0.051470963329249039275 0.012222068961277086571 0.016117683912887946496 -0.047655525888242726562 -0.0058214181757069013642 0.022415344258621360679 0.035259734730423937521 -0.25368246997642063256 0.12338480692870192057 -0.027854467758670349575 -0.075163373863447457968 0.079234555703733666743;-0.21462715516874769639 0.092464030142585265648 -0.29730521780295732226 0.044028553520273940036 -0.087989389118785760191 -0.0018283865124648366121 -0.089257995061397074621 -0.080852049373935780396 0.10542602839859245567 -0.62829096650961058224 -0.15660492872899742234 -0.32294923391503566057 -0.96538497730389949414 -0.13768438130073004655;-0.021394180254453783185 -0.025886376048810198075 -0.039859544070510219416 0.0033434362144186121832 -0.0052277309446300858353 0.041035036518548451134 0.0078535918485767349656 -0.01418030942091541742 -0.02871735561088117894 0.019817698353087279811 0.32806001853913291377 0.042675514603834271976 -0.054946937999370837336 0.15919288193439387613;0.27777513018670524358 -0.62563507111468774635 -0.23438184084930760442 -0.3779218055080041383 -0.28489850935550442568 1.116007109230153338 0.11743194614359174499 -0.124924538773443769 -2.0608180601133514465 -1.8278369377401448848 -0.042873590110983267332 0.33811607188190545559 0.051757395880653381259 -0.043788391459687867058;0.28082471850477636055 -0.1243839463260539846 0.36949978423318385889 -0.093608619335261308847 0.12619874942652140049 -0.024340503860736748681 0.13383186668675342568 0.087205942173745221169 -0.082510092121711633983 0.64403004676712305443 0.15893062735073565372 0.2088611840413192311 0.94699421563224273068 0.14739720467088254785;-1.0481182023783839341 0.029956824736077618948 0.14711838861518489185 -1.0740109929708281378 -1.6605075525093171418 0.24627071970029260073 1.5890349597026764972 0.42298248667925142374 0.026538222210978963667 1.8013740528150421483 -0.40206664497448857398 -1.3145990660949204987 -2.606423640372806716 -0.26626898700252138452];

% Layer 2
b2 = [0.16012069291722208497;-0.052486176544635540497;0.088829886691097398321];
LW2_1 = [0.047619656656515699233 -0.048139815849817323146 1.2400108999622654338 -0.56831288120410738962 0.067838350116112694499 -2.9762086896949022652 -0.11989281318336079962 -0.18065011243849415923 -2.6597899857916327271 -0.16167763471538940112;0.024600700458800379283 -0.031074133313585512034 -0.10776091645764550309 0.46557887597675146063 -2.1459543524345479071 0.78159421155545638626 0.50205814838765683294 -0.16413076066357382143 0.93435579280904956789 -0.0045544569732062023873;0.0044569058621977686308 -0.024463441722909394505 0.013727209720319101874 0.30494384650760092415 0.90051292803993521208 0.85307152340805991741 2.5828784541858964552 -0.0014728174653998700808 0.8572765562363932057 -0.018474427332476457686];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
