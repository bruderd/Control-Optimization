function [Y,Xf,Af] = nnet_2019_09_30_12_17(X,~,~)
%NNET_2019_09_30_12_17 neural network simulation function.
%
% Auto-generated by MATLAB, 30-Sep-2019 12:17:30.
% 
% [Y] = nnet_2019_09_30_12_17(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.50566973365884;-2.25694169526187;-2.31692614454142];
x1_step1.gain = [0.385388843904636;0.454451989534436;0.464244179672087];
x1_step1.ymin = -1;

% Layer 1
b1 = [-2.970622069267485621;-1.1826443986398160746;-1.1716611852237170943;-1.0291656033184604091;0.38564924612202811094;-0.2956029649984915908;0.410482157913706458;-0.35676384158922835876;3.2486042902428846624;2.087308175590947279];
IW1_1 = [1.6712583325101690868 1.2592748761785588218 -0.35961993028984601262;1.7489132043990973653 -1.364468139683021608 -0.48306810960143126144;0.59464268427008415419 0.28741300775821915225 1.391651331434009542;1.1240135029705013991 1.4418026857734775881 -0.81394846370816098524;-0.28035596907739934736 0.63773373451390769073 0.76314787397012351366;-0.82374363099382719167 0.72797026393223629448 0.31949244152665473573;0.68686783863265876704 0.8575082790867213367 -0.46192356528231209856;-0.48131799440527472944 -0.0062276117082966740007 -0.7067229360435235419;1.5011883140670247982 1.2509688264461469309 1.796245398000454907;2.0500307552131316058 -1.9410034606812127667 -0.91081497903595654009];

% Layer 2
b2 = [0.21361135334690556364;-0.53446856929249186852;-0.10606954705088489366];
LW2_1 = [0.26082589394871547039 -0.019791992431008983283 0.030252852719256109748 0.3864989727111786677 0.04454241810912638877 0.050703023694210515304 1.1788544922105397283 -0.018093191173070961864 -0.058895164302862505756 -0.017298679797841904487;-0.46973131015133012811 0.21761459020205989323 0.46516661442441942231 0.048598919987235110474 0.37871998735164397187 -0.61158937546559744014 0.045547309835564077363 -1.3202706516830191585 -0.16651188372283565187 0.016695757495812372367;-0.077736105936854552056 0.24823433755534124456 -0.16631535521285828461 0.033856715473523882332 -0.34888193427523350731 -1.005951088910798763 0.083005925136316244251 0.35014174914007489825 0.067527092171695682343 0.10669970366483377822];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
