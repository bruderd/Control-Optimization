function [Y,Xf,Af] = nnet_2019_10_01_12_32(X,~,~)
%NNET_2019_10_01_12_32 neural network simulation function.
%
% Auto-generated by MATLAB, 01-Oct-2019 12:32:43.
% 
% [Y] = nnet_2019_10_01_12_32(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.34476644872508;-0.96159813110824;-0.911667704988021;-0.676676944525988;-0.631564676222516];
x1_step1.gain = [0.709694181281201;0.97638358203474;1.10447757104138;1.49106664585379;1.7101199068683];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.0435504203030223636;0.25963757269215603785;-0.54868760179620390538;-2.0259640512136738444;-1.0140311839429643204;-1.7458086122550233732;-0.38260855497826440352;-1.0435764931196329641;-1.4852152815819836817;0.091386404389217065769];
IW1_1 = [-2.7493042625796646483 3.7611776870995079491 -5.4918203540781833638 6.5304149819531236432 -4.4684374779386004661;1.3628842662187083956 -21.301059107378289781 27.72601626077220871 -5.0072567519542312553 -4.7232502329500523075;-14.38556363591470344 -15.318349592199329123 8.9374778887035830621 17.048187812957547038 -13.60428912683964775;29.703185676393285775 -26.823000707901801576 6.1653329190440144814 -30.20222913029862255 5.0926408431384713182;-14.479151677544077614 -15.782331380505906893 10.737579683421289545 17.236992130964260639 -14.260744294493733264;23.397942274071336755 -26.446293479430238449 -3.5044208979406170634 -21.937266099312033418 1.2333748512193130065;26.663610155223221199 -9.8101452874998464893 4.4963850138160337266 20.414997510407310699 15.027313875054012726;19.055100857984012208 -4.3881715606363673743 -0.77512448589357552109 14.413105538738257394 12.925222094031687092;9.0664632340756696749 -36.156172734195088481 -28.340828091721576243 -3.0649349231283169459 3.3051768219103152546;2.8425044409733333239 -6.3393182978444464482 -7.5111111765430553788 4.20131212541877197 5.1616720782488521024];

% Layer 2
b2 = [-0.13906784599275134884;-0.070621040895051764852;0.012015578865169580791];
LW2_1 = [0.17814112949060995073 0.22974675284330986491 0.49923910990810382859 -0.67325878140527595228 -0.5466580413877961675 0.71976047988277858103 -0.28324075765597084287 0.3339738028676694781 -0.19780012638516303314 -0.21296179665588962915;0.060529150379303238438 0.075294721326575511644 0.28512589784781122715 -0.41428520129479251555 -0.30919293968343797285 0.46227974427422341419 -0.025129004226450875337 0.086634777715667118936 -0.074103461594448652439 -0.15612950829329497182;0.03975796117609071284 0.0040424468091253022359 0.14629353513570653167 -0.085998583738633047058 -0.1400712445870539169 0.097966991186930488245 -0.071907648176568403353 0.093983190165978669484 0.067635886043333939832 -0.13028284750169163986];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
