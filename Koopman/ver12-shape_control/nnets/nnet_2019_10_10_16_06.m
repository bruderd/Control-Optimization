function [Y,Xf,Af] = nnet_2019_10_10_16_06(X,~,~)
%NNET_2019_10_10_16_06 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 16:06:35.
% 
% [Y] = nnet_2019_10_10_16_06(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.579754433464736;-0.805543758446051;-0.203588990146155;-0.125523154590286;-0.223927909142362;-6.17935470084711e-13;-1;-1];
x1_step1.gain = [2.14010824611054;2.03372170692418;6.20638380148667;8.55015998110298;7.84113097277866;981642116310.616;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [4.3120680911681201763;0.59871228324146175126;-0.59717016678839784927;12.35489223686964344;0.41843219345111898333;1.1033782109332990196;0.84330231550063394774;-0.90310760876202544889;0.25724242801432073424;2.7663986319220965626];
IW1_1 = [-5.8064687437654978197 -2.1140855038568937552 13.680567782940331156 8.0322415762262178163 3.6417328656889655925 15.666806998670194773 1.5522908540252216003 -0.73988777238240133194;0.21169014512044748155 -2.4979249612588714236 3.0297064500483248395 -0.76214090863750361127 2.1826200585899848683 3.5839210181022482793 0.042277320279800904845 1.8313595119586667526;2.1710393543926351789 1.3472096998609210949 -27.447634383803617197 -11.413314917789854519 -6.1205703810067637605 -31.562662542850805636 -1.5570778118997212758 -1.6048825103921418034;-8.1771608408122311573 -19.049444877522603292 47.699540428687626559 18.213420401634952128 20.672464998742530184 59.858020908020279194 -4.5077424782309760687 -2.2487809460804775163;0.61197657237954339315 -2.5133764649573460126 3.1040244012759252712 -1.1654152960625614455 2.1156914931882830899 3.6021821806234961549 0.058642722499391133906 1.7569204152313406819;-12.391552946376844346 3.7409477191484503678 7.2701310138690047324 19.032005067925872765 0.6228323872881406098 12.429853378783636941 -0.60801599013085172452 -3.0487068487589126242;9.4603141547680849044 0.21364540600776565915 11.762525848686562924 -11.3378721083691687 -1.8104196863180583854 8.0161071475067284808 -0.31545416511632989875 1.1623709000060788998;-9.6223230762978548825 -0.23008909717399170236 -12.329423935151002212 11.30692764079915591 1.794552677199663826 -8.6551424259554288199 0.28028009076474569294 -1.1444208742124675204;1.0131883813062423361 -2.6462192255136107732 3.3446555179672095015 -1.6475160452330641636 2.1411224114391584905 3.7970775145146542506 0.079272901213799151776 1.7833430675239010377;-2.1000818036824604462 -3.1463682455660579862 14.661628070616181674 6.625041439867329629 5.1948510162652610234 17.335618009085912661 1.2320784740406389712 -1.0324402883071568393];

% Layer 2
b2 = [-0.11879851417994596874;0.59427672487255367439;0.29775737360521120634];
LW2_1 = [-0.066480725482733926679 -48.070551256188963407 -0.16233258411280959699 -0.087173708127809459989 95.190164310641236511 0.12510328777107507237 4.2366791264781715753 3.9182689234288052837 -46.982518959331258657 -0.046982519597721830729;-1.50420183604341684 48.294415206096680038 -0.20165234410797053255 0.41213544804309354408 -98.394584757159378796 -0.86816112434728831548 -22.944129916304820682 -23.14164273573531716 48.990553076840811286 0.38725907759613742432;-1.0981015461409839862 25.591050687771019767 0.67870346147549032167 -0.29374725095586595724 -51.662369867067319262 -0.364949295990712963 -14.987706757392308177 -14.986712468593630376 26.33861136880680931 1.1443978529843255032];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
