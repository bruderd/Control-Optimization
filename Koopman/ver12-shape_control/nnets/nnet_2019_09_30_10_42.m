function [Y,Xf,Af] = nnet_2019_09_30_10_42(X,~,~)
%NNET_2019_09_30_10_42 neural network simulation function.
%
% Auto-generated by MATLAB, 30-Sep-2019 10:42:04.
% 
% [Y] = nnet_2019_09_30_10_42(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 3xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-2.50566973365884;-2.25694169526187;-2.31692614454142];
x1_step1.gain = [0.385388843904636;0.454451989534436;0.464244179672087];
x1_step1.ymin = -1;

% Layer 1
b1 = [-3.0630319037778392932;1.9484132185989602171;0.069014509466388415659;0.83052638281299551171;0.029844446279109322628;-0.52865844979650844504;0.5863976753920625562;-0.8576849620521409534;-2.4561716187968642977;3.7745284001467824808];
IW1_1 = [1.3713327489039646156 -1.7659173871137638923 -1.7205889591795886506;-1.3835219773659312992 -1.1045165676089125917 -1.9431693298417214155;1.1242454791203320141 1.871355824414375757 -0.62963204825707919099;-1.1981257801537215091 1.4219633459369915851 1.2886597795163055036;-0.42112411139827315987 -0.10764056642308450495 -0.27670765265838437319;0.14075139381391155169 0.586225901371638769 -0.65505414392756700082;0.65617593452274625143 -0.77680877696906536212 -0.72173270269585831915;-0.23224986484592291536 -0.76741452845692181839 0.87260686822788369188;-0.91041132331261775956 -0.35595582099808814602 -0.71653063300620178921;1.84410847534265665 0.70518764683527712656 -1.6495581866238853141];

% Layer 2
b2 = [0.31415486758266397693;-0.78824715675389511738;0.2528947996810593235];
LW2_1 = [0.022908997803942839772 -0.030448964894294723582 0.048704620163181618075 0.038491522826664029133 -1.4104149783526074291 1.2388714981494048928 -0.070684838195569629771 -0.74700827079224074723 -0.43336568635887617873 -0.52046931222358838731;-0.1434901535854698762 -0.016379283166204079702 0.023630072900630877397 -0.066301622509402510786 -2.6567471170602048325 -0.54608759084190283684 0.17970520241581494636 0.3347192367241151878 -0.69314793239250793722 -0.057984977499697831771;0.32111078489637667754 -0.0086903126281689304505 -0.015235458777114352369 -0.38648465769579082307 -0.1364403757660119787 0.070303718757356581381 1.1829241529169780556 -0.05635857569907963549 -0.2178146757183415938 -0.37994852126094136313];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
