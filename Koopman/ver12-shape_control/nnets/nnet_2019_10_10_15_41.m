function [Y,Xf,Af] = nnet_2019_10_10_15_41(X,~,~)
%NNET_2019_10_10_15_41 neural network simulation function.
%
% Auto-generated by MATLAB, 10-Oct-2019 15:41:29.
% 
% [Y] = nnet_2019_10_10_15_41(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 7xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-0.870529476424574;-0.653758942446831;-0.723837594880846;-1.55242771955881;-0.968176111583366;-1;-1];
x1_step1.gain = [0.721388909521628;0.873096891808657;0.983150215685652;0.934521236937008;1.39227634850687;1;1];
x1_step1.ymin = -1;

% Layer 1
b1 = [2.554449306082296367;-1.5295483551559712065;-3.6902323383496269393;0.10700559082922256326;-3.8971239412609199881;-1.8294115223420357452;4.8985868936612551039;-7.1198287187770121776;-5.3933081787973939925;3.077134726368029316];
IW1_1 = [0.94943953440835282542 1.254549398435103269 -1.5631024723994626502 0.44215747294701546188 -2.1596543036979420904 -1.611333670605178181 1.3394646662045779362;-1.9403776421598348811 2.2472169894216862396 0.78936556070518471007 -0.18373322057421387354 1.6731215982710594403 -0.930754181922785917 -1.9878899410599604192;-0.46411370519946448798 -0.064764467314923857 0.50092110229025388346 6.2635912042482546624 -1.009667414867034374 -2.0808710811161512666 0.69502293644363311031;-1.0635504309464429706 1.6604580828834045736 -2.8065168249094494257 -1.0744913171796017792 0.18453364863195653722 -1.6403485672720214961 -0.24639926947874468688;-3.8480976338024199812 -5.3279726954233259661 2.3099492786141313516 4.1887462584782149122 -1.0880672892182088329 -1.9132951054494269361 0.34278180155624182746;-0.16321907415699651867 1.2771065850101144257 0.2973454605202051626 4.0597217777298446606 -0.55518353394548936031 -2.3995484038056162923 0.16535315540503917053;6.2507378757781495437 -0.0051068984757685897957 6.0966871055160067883 -5.3573093710337502671 -6.0182520476615755101 -4.2820202946990466586 2.9535661429043127413;4.0610259099282455253 -6.616829093123460126 19.273986390730954099 9.0858739683031757295 2.0251913229915254888 0.06275995110455390158 -11.574570225824531988;-5.956158664239886491 0.502933015748524892 -2.7782847667773800104 -0.92257951639778523756 2.5332151499130741712 2.9672823933807555008 -2.7446559716762388703;1.8174379252946846197 2.5062996704715154728 -1.5239199824104117109 -1.0446754505075290798 4.8693110097433258687 -0.12873525106310268473 -3.0627769160422757544];

% Layer 2
b2 = [0.18590015741270915495;0.2699390019967574661;0.43627725081229695725];
LW2_1 = [-0.87463203872316275245 -0.43876020086012684773 0.39215211828858137499 0.44923685682956265852 -0.35069889583055818827 -0.35256286927671337539 -0.19532333361859466336 0.095845925127613487704 -0.53327249683028310479 -0.11189854953052216779;-0.47617005643103871293 0.28382302313534141236 0.96980339919328195641 0.19975791512483120904 -0.11128461474732206926 -0.99672955624956260934 0.11036148448253170484 0.024924562377936471114 -0.48592407970027751141 0.23930850136396844552;-0.24985104451860087882 0.52129729556936799106 0.68474555569978479141 -0.0079288460322749915177 0.069035055768047151603 -0.75543947460397387061 0.14081965825898470901 -0.095019227396138716824 -0.15745382826470763482 0.17666560209212942012];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
