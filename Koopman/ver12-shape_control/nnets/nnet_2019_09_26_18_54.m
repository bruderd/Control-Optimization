function [Y,Xf,Af] = nnet_2019_09_26_18_54(X,~,~)
%NNET_2019_09_26_18_54 neural network simulation function.
%
% Auto-generated by MATLAB, 26-Sep-2019 18:54:42.
% 
% [Y] = nnet_2019_09_26_18_54(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 8xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 3xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [-1.21303270592303;-1.22667609163178;-1.17851594928264;-1.28075944605278;-1.01028743961499;-0.558308375352395;-0.692921267220199;-0.536958379713264];
x1_step1.gain = [0.810311019256358;0.820551293913489;0.936098596551709;0.922335636577094;1.06375456741261;1.12971874991914;1.39097890531901;1.98577748859204];
x1_step1.ymin = -1;

% Layer 1
b1 = [-1.2571786827443143242;-1.4869603781248419416;1.3823387661955248706;0.74508781564591353153;-7.0710666786266322958;0.51996236114539762241;19.772726351641590981;16.228369395826842236;-0.46848624392308801934;0.38155012180430608604];
IW1_1 = [2.6659337354800762832 -0.52035853152660971332 -7.0825664017340326239 -5.2803274269900439819 -11.40453126592386468 -4.729907687129295546 -10.41556482824504215 1.2185470038230667988;1.9251253810283068812 0.8473182461475002869 2.4644585132090992552 0.15728780903375957911 2.4580730776663615167 -1.1181871583964297923 0.19296242991532036593 1.0956125438904771308;-2.0602287499628708645 -0.86694635296963318272 -2.3938614865936220788 -0.17553534735337220085 -2.4456210267047939766 1.0863883790452102396 -0.29938357778514651519 -1.170210405665256248;-0.61036229171014078076 1.9512483613463880161 3.09226329026812774 -0.47584985838266452562 1.328934448350588271 -0.52355166447031931121 1.9336154537623464478 5.8826594742078714972;-3.2802985868458502949 -41.246667156127536202 7.4514838113912480466 -0.24115589981759544269 -0.32264856216453197124 -15.703724585086845877 -15.150739521796733555 3.2063762979770125128;1.8571102560306727014 0.98385549787682258227 -6.6294766674109144589 -4.5062632968035334358 -4.8834353167341255642 -1.1529680226862166759 -4.9257306692381508384 -0.011548533646190295432;16.357567620812343279 3.8868037700797777312 -54.800808849171595227 -51.221753028884727144 -46.776415713681565478 3.2139608875640122143 -29.016101240303168396 -21.020543936632435589;6.1588738704084962094 -8.5303860283865784453 -9.6684147675200051708 -41.462882070691627234 -57.421954027889547945 9.3722848680507517827 54.767515656441084104 35.289700098115659443;-4.7859534872734119659 -0.37190918342550849385 3.9738346574523517596 -0.46208021254114889365 -1.851963780640043078 -0.10931825671194078664 1.0234506931259108597 -1.3041393237413849704;3.9185933303482149981 -2.1797495031541322952 11.940412031750065935 -9.0098940699579408431 8.2633634816474259566 2.1768419352947430134 4.5824698770121976565 -7.4817084499158745814];

% Layer 2
b2 = [-0.11321493256282628981;0.25335290308363073164;0.33767588631691880519];
LW2_1 = [0.017742352762192686866 -5.6190804280291457573 -6.111565578792175657 -0.15035578355939194228 0.093524423179810148299 -0.061253812793019446481 0.024822691995966587875 -0.0035617153039573926955 -0.20956401073611879982 0.024809873439892889124;-0.45791352347299901782 -7.2740185721862529178 -8.0574891510588795285 -0.56387583868815605026 0.34768020381809872088 0.71236283548739498528 -0.01393262443032357821 0.1319332339872379134 0.68282891536092626961 -0.36708081510368106848;0.062492690451416095521 4.6488112288241252301 4.4113084474646955258 -0.099704348805261050481 -0.14383637926121617401 -0.31873678036459773821 0.25559434763415866954 0.11276300241747932995 -0.14340360283161576738 -0.052404877200683611105];

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = [1;1;1];
y1_step1.xoffset = [-1;-1;-1];

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
  X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
  Q = size(X{1},2); % samples/series
else
  Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS

    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
  Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
  y = bsxfun(@minus,x,settings.xoffset);
  y = bsxfun(@times,y,settings.gain);
  y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
  x = bsxfun(@minus,y,settings.ymin);
  x = bsxfun(@rdivide,x,settings.gain);
  x = bsxfun(@plus,x,settings.xoffset);
end
